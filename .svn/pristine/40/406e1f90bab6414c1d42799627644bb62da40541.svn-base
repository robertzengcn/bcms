<?php

class CommodityAddScoreLogService extends BaseService {

    /**
     * 构造函数
     */
    public function __construct() {
        $this->dao = new CommodityAddScoreLogDAO();
    }

    /**
     * 批量删除
     *
     * @param array $arr(id,...)
     * @return boolean
     */
     public function deleteBatch($ids) {
        Entity::isIds($ids);   // 验证ids是否合法
        $scoreruleArray = $this->dao->getBatch($ids);

        return $this->dao->deleteBeans($scoreruleArray);
    } 

    /**
     * 获取一条数据
     *
     * @param Entity $scorerule
     * @return Result
     */
    public function get($scorerule) {
        $this->dao->get($scorerule->id, $scorerule);
 
        return $this->success($scorerule);
    }


    /**
     * 获得grid数据
     *
     * @param array $where
     *            查询条件
     * @return Result
     */
	 
    public function query($where) {
        $scoreruleArray = $this->dao->query($where);
			 $memberdao = new MemberDAO();
			 $commodityruledao = new CommodityRuleDAO();
        foreach($scoreruleArray as $key=>$val){
			$memberinfo = $memberdao->getbyid(array('id'=>$val->uid));
			$rulename= $commodityruledao->query(array('id'=>$val->type));
			$val->username = $memberinfo->username;
			$val->telephone = $memberinfo->telephone;
			$val->name = $rulename[0]->name;
        	$val->date=date('Y-m-d H:i',$val->date);
        	 
        }	
        return $this->success($scoreruleArray);
    }

    /**
     * 保存数据
     *
     * @param Entity $scorerule
     * @return Result
     */
    public function save($scorerule) {
    	
         $scorerule->validate();        
        // 获取class对象并插入数据
        $this->dao->save($scorerule);
      
        return $this->success();
    }
    
    /*
     * 根据type取值
     * @param int $type
     * */
    public function getbytype($type){
    	$arr=array('type'=>$type);
    	$rs=$this->dao->getbytype($arr);
    	return $this->success($rs);
    }

    /**
     * 更新数据
     *
     * @param Entity $commodity
     * @return Result
     */
    public function update($scorerule) {
    //    $commodity->updatetime = time();
    	
        $scorerule->validate();
        $this->dao->beginTrans();
        return $this->dao->update($scorerule);
    }
    
    /*
     * 
     * 检查数据是否存在，存在的话放回数据，不存在则返回空数组
     * */
    
    public function checkdate(){
    	return $this->dao->getdate();
    }
    
    /*
     * 返回highchart所需的统计数据
     * */
    
    public function getdate(){
    	$totalnum=$this->dao->gettotal();

    	$rs=$this->dao->getdistincttype();
 
    	if(!empty($rs)){
    		$arr=array();
    		foreach ($rs as $key=>$val){
    			$num=$this->dao->gettypenum(array('type'=>$val['type']));
    			$arr[$val['type']]['name']=$val['name'];
    			$arr[$val['type']]['y']=floatval(number_format($num/$totalnum,2));
    		}
    		return $this->success(array_merge($arr));
    		
    	}else{
    		throw new ValidatorException(180);
    		}
     
    }
	
	
}

