<?php

class WeiboService extends BaseService {
	private $boyimanagerurl="http://www.hwibsc.com/interface/hma/HmaAccountInterface.php";
	/*
	 * 新浪微博需要的参数
	 * */
	private $service = null;
	public $useragent = 'Sae T OAuth2 v0.1';
	public $connecttimeout = 30;
	public $format = 'json';
	public $timeout = 30;
	public $ssl_verifypeer = FALSE;
	public $decode_json = TRUE;
	public $access_token;
	public $http_info;
	public $debug=false;

    /**
     * 构造函数
     */
    public function __construct() {
        parent::__construct();
        $this->dao = new WeiboDAO();
    }
    
    public function checkaccess(){
    	return $this->dao->checkaccess();
    }
    
    public function update_token($token, $expire, $uid){
    	$now=time();
    	$expiretime=$now+$expire;
        $weibo=new Weibo();
        $weibo->access_token=$token;
        $weibo->expires_time=$expiretime;
        $weibo->uid=$uid;
        $this->dao->save($weibo);
    	
    }
    
    public function getlast(){
    	return $this->dao->getlast();
    }
    
    /*
     * 发布一条微博
    * */
     
    public function updatepost($content){
    	 
    	$weiboser=new WeiboService();
    	$weibo=$weiboser->getlast();
    	 
    	$weicontent=mb_substr(strip_tags($content),0,140,'utf-8');
    	 
    	$url='https://api.weibo.com/2/statuses/update.json';
    	if(!$weibo->access_token){
    		echo json_encode(array('stute'=>false,'msg'=>'acces token为空','code'=>0,'data'=>null));
    		exit();
    	}
    	$post_data=array('access_token'=>$weibo->access_token,
    			'status'=>$weicontent,
    	);
    	$this->access_token = $weibo->access_token;
    	 
    	$jsresult=$this->oAuthRequest( $url,'POST',$post_data,false);
    	if($jsresult === FALSE ){
    
    		echo json_encode(array('stute'=>false,'msg'=>'CURL Error','code'=>0,'data'=>null));
    		exit();
    	}
    
    	 
    	$result=json_decode($jsresult);
    	 
    	return $this->success($result);
    	
    	 
    
    	 
    	 
    }
    
    /**
     * Format and sign an OAuth / API request
     *
     * @return string
     * @ignore
     */
    private function oAuthRequest($url, $method, $parameters, $multi = false) {
    
    	 
    
    
    	switch ($method) {
    		case 'GET':
    			$url = $url . '?' . http_build_query($parameters);
    			return $this->http($url, 'GET');
    		default:
    			$headers = array();
    			if (!$multi && (is_array($parameters) || is_object($parameters)) ) {
    				$body = http_build_query($parameters);
    			} else {
    				$body = self::build_http_query_multi($parameters);
    				$headers[] = "Content-Type: multipart/form-data; boundary=" . self::$boundary;
    			}
    			 
    			 
    			return $this->http($url, $method, $body, $headers);
    	}
    }
    
    /**
     * Make an HTTP request
     *
     * @return string API results
     * @ignore
     */
    private function http($url, $method, $postfields = NULL, $headers = array()) {
    	$this->http_info = array();
    	$ci = curl_init();
    	/* Curl settings */
    	curl_setopt($ci, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_0);
    	curl_setopt($ci, CURLOPT_USERAGENT, $this->useragent);
    	curl_setopt($ci, CURLOPT_CONNECTTIMEOUT, $this->connecttimeout);
    	curl_setopt($ci, CURLOPT_TIMEOUT, $this->timeout);
    	curl_setopt($ci, CURLOPT_RETURNTRANSFER, TRUE);
    	curl_setopt($ci, CURLOPT_ENCODING, "");
    	curl_setopt($ci, CURLOPT_SSL_VERIFYPEER, $this->ssl_verifypeer);
    	if (version_compare(phpversion(), '5.4.0', '<')) {
    		curl_setopt($ci, CURLOPT_SSL_VERIFYHOST, 1);
    	} else {
    		curl_setopt($ci, CURLOPT_SSL_VERIFYHOST, 2);
    	}
    	curl_setopt($ci, CURLOPT_HEADERFUNCTION, array($this, 'getHeader'));
    	curl_setopt($ci, CURLOPT_HEADER, FALSE);
    
    	switch ($method) {
    		case 'POST':
    			curl_setopt($ci, CURLOPT_POST, TRUE);
    			if (!empty($postfields)) {
    				curl_setopt($ci, CURLOPT_POSTFIELDS, $postfields);
    				$this->postdata = $postfields;
    			}
    			break;
    		case 'DELETE':
    			curl_setopt($ci, CURLOPT_CUSTOMREQUEST, 'DELETE');
    			if (!empty($postfields)) {
    				$url = "{$url}?{$postfields}";
    			}
    	}
    
//     	if ( isset($this->access_token) && $this->access_token )
//     		$headers[] = "Authorization: OAuth2 ".$this->access_token;
    
    	if ( !empty($this->remote_ip) ) {
    		if ( defined('SAE_ACCESSKEY') ) {
    			$headers[] = "SaeRemoteIP: " . $this->remote_ip;
    		} else {
    			$headers[] = "API-RemoteIP: " . $this->remote_ip;
    		}
    	} else {
    		if ( !defined('SAE_ACCESSKEY') ) {
    			$headers[] = "API-RemoteIP: " . $_SERVER['REMOTE_ADDR'];
    		}
    	}
    	
    	curl_setopt($ci, CURLOPT_URL, $url );
    	//curl_setopt($ci, CURLOPT_HEADER, 0);
    	curl_setopt($ci, CURLOPT_HTTPHEADER, $headers );
    	curl_setopt($ci, CURLINFO_HEADER_OUT, TRUE );
    
    	$response = curl_exec($ci);
    	$this->http_code = curl_getinfo($ci, CURLINFO_HTTP_CODE);
    	$this->http_info = array_merge($this->http_info, curl_getinfo($ci));
    	$this->url = $url;
    
    	if ($this->debug) {
    		echo "=====post data======\r\n";
    		var_dump($postfields);
    
    		echo "=====headers======\r\n";
    		print_r($headers);
    
    		echo '=====request info====='."\r\n";
    		print_r( curl_getinfo($ci) );
    
    		echo '=====response====='."\r\n";
    		print_r(curl_error($ci));
    		print_r( $response );
    	}
    	curl_close ($ci);
    	
    	return $response;
    }
    
    /**
     * @ignore
     */
    public static function build_http_query_multi($params) {
    	if (!$params) return '';
    
    	uksort($params, 'strcmp');
    
    	$pairs = array();
    
    	self::$boundary = $boundary = uniqid('------------------');
    	$MPboundary = '--'.$boundary;
    	$endMPboundary = $MPboundary. '--';
    	$multipartbody = '';
    
    	foreach ($params as $parameter => $value) {
    
    		if( in_array($parameter, array('pic', 'image')) && $value{0} == '@' ) {
    			$url = ltrim( $value, '@' );
    			$content = file_get_contents( $url );
    			$array = explode( '?', basename( $url ) );
    			$filename = $array[0];
    
    			$multipartbody .= $MPboundary . "\r\n";
    			$multipartbody .= 'Content-Disposition: form-data; name="' . $parameter . '"; filename="' . $filename . '"'. "\r\n";
    			$multipartbody .= "Content-Type: image/unknown\r\n\r\n";
    			$multipartbody .= $content. "\r\n";
    		} else {
    			$multipartbody .= $MPboundary . "\r\n";
    			$multipartbody .= 'content-disposition: form-data; name="' . $parameter . "\"\r\n\r\n";
    			$multipartbody .= $value."\r\n";
    		}
    
    	}
    
    	$multipartbody .= $endMPboundary;
    	return $multipartbody;
    }
    
    /**
     * Get the header info to store.
     *
     * @return int
     * @ignore
     */
    public function getHeader($ch, $header) {
    	$i = strpos($header, ':');
    	if (!empty($i)) {
    		$key = str_replace('-', '_', strtolower(substr($header, 0, $i)));
    		$value = trim(substr($header, $i + 2));
    		$this->http_header[$key] = $value;
    	}
    	return strlen($header);
    }
    
    /*
     * 移除微博关联
     * */
    public function removetoken(){
    	$this->dao->removetoken();
    	return $this->success();
    }
    

    


}
