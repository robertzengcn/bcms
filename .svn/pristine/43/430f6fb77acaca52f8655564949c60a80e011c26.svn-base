<?php
error_reporting(E_ALL);

require_once $_SERVER ['DOCUMENT_ROOT'] . '/web-setting.php';
require_once DAOPATH . '/DBBaseDAO.php';
require_once DAOPATH . '/ORMMap.php';
require_once KERNELPATH . '/ErrorMsgs.php';
require_once KERNELPATH . '/LogMsgs.php';
require_once DAOPATH . '/DTExpression.php';
require_once DAOPATH . '/DTOrder.php';
require_once ABSPATH . '/controller/Controller.php';

/**
 * 健康中心-在线问答接口
 *
 * 接口方式: HTTP
 * 返回格式: json
 * 调用例子：http://www.boyicms.com/interface/hma/OnlineInterface.php&part={"type":"system_suggest","user_id":"","content":""}
 * @param part  接收json数据
 *
 * 具体发送参数据与返回数据请参看数据格式文档
 */

class OnlineInterface extends DBBaseDAO{
    // {{{ memebers
    private $__hos_name = '';
    
    // }}}
    
	/**
	 * 构造函数
	 */
	public function __construct() {
	    parent::__construct();
	    
	    $hospital = R::findOne(TABLENAME_CONTACT, "flag='name'");
	    $this->__hos_name = $hospital->val;
	    
		$this->_begin();
	}
	
	/**
	 * 接口入口
	 * 返回：json
	 * */
	public function _begin() {
		$data = $this->getRequest('part', '');
		
		$data = str_replace("'", '"', $data);
		$data = str_replace("\n", '', $data);  //有时候传过来的有换行，比如图片.
		if(!is_null(json_decode($data))){
			//客户端传来的json串略有差异
			$data = json_decode($data, true);
				
		}else{
			$data =$_REQUEST;
		}
		
		if(empty($data)){
				
			echo json_encode(array('stute'=>false,'code'=>'10001','msg'=>'params is null!','data'=>null));
			exit();
		}
		
		if (!isset($data['domain'])) {
			$urlData = parse_url(NETADDRESS);
			$data['domain'] = $urlData['host'];
		}
		
		switch ($data['type']) {
			case 'online': //在线提问
				$result = $this->_online($data);
				break;
			case 'question_list': //提问列表
			    $result = $this->_questionList($data);
			    break;
			case 'question_detail': //提问详情
			    $result = $this->_questionDetail($data);
			    break;
			case 'question_asked': //追问
			    $result = $this->_questionAsked($data);
			    break;
			default:
				return false;
				break;
		}
		
		echo json_encode($result);
	}
	
	// {{{ protected function _online()
	
	/**
	 * 在线提问
	 * */
	protected function _online($data) {
	    try {
	    	

	        if (!isset($data['user_id']) || empty($data['user_id'])) {
	            $user = $this->_getuser();
	            if ($user) {
	            	$data['user_id'] = (int)$user['user_id'];
	            }
	        }

	        if($data['age']==""||(int)$data['age']<0){
	        	return array('type'=>'online', 'online'=>'no', 'msg'=>'年龄不正确');
	        }        
	        
	        if (isset($data['img_url']) && $data['img_url']) {
	        	//处理图片
	        	$desPath = "images/question_" . time();
	            if ($url = createImageFromString($data['img_url'], $desPath) )
	            {
	                $data['img_url'] = "/interface/hma/" . $url;
	            } else {
	                $data['img_url'] = '';
	            }
	        }
	        
	        $data['question_id'] = 1;
	        
	        //消息分发推送dispatcher
	        $this->_dispatcher($data, 'distribute');
	        
	    } catch (Exception $e) {
	        return array('type'=>'online', 'online'=>'no', 'msg'=>$e->getMessage());
	    }
	    $msg = empty($user) ? '提问成功，稍后将有专业医生为您解答' : $user;
	    
	    return array('type'=>'online', 'online' => 'yes', 'msg'=>$msg);
	}
	
	// }}}
	// {{{ protected function _questionList()
	
	/**
	 * 提问列表
	 * */
	protected function _questionList($data) {
	    try {
	        $result = R::findAll(TABLENAME_ASK, 'user_alis =:user_id', array('user_id'=>$data['user_id']));
	        $list = array();
	        if (!empty($result)) {
	            $index = 0;
	        	foreach ($result as $key=>$value) {
	        		$list[$index]['question_id'] = $value->id;
	        		$list[$index]['reply'] = ((int)$value->isanswer==1) ? 'yes' : 'no';
	        		$list[$index]['title'] = $value->subject;
	        		$list[$index]['time'] = $value->plushtime;
	        		$index++;
	        	}
	        }
	        
	    } catch (Exception $e) {
	        return array('type'=>'question_list', 'question_list'=>'no', 'msg'=>$e->getMessage());
	    }
	    
	    return array('type'=>'question_list', 'data' => $list);
	}
	
	// }}}
	// {{{ protected function _questionDetail()
	
	/**
	 * 提问详情
	 * */
	protected function _questionDetail($data) {
	    try {
	        $quesObj = R::load(TABLENAME_ASK, $data['question_id']);
	        if (empty($quesObj->id)) {
	            return array('type'=>'question_list', 'data' => array());
	        }
	        
	        $askdesc = R::findOne(TABLENAME_ASKDESC, 'ask_id =:question_id order by id desc', array('question_id'=>$data['question_id']));
	        
	        $question = array();
	        $question['question_id'] = $quesObj->id;
	        $question['question_type'] = 0;
	        $question['title'] = $quesObj->subject;
	        $question['description'] = $askdesc->description;
	        $question['image_url'] = $askdesc->pic1;
	        
	        $list = array($question);
	        $this->_getAllContent($data['question_id'], $list);
	    } catch (Exception $e) {
	        return array('type'=>'question_list', 'question_list'=>'no', 'msg'=>$e->getMessage());
	    }
	    return array('type'=>'question_list', 'data' => $list);
	}
	
	// }}}
	// {{{ protected function _getAllContent()
	protected function _getAllContent($question_id, &$selected = array()) {
	    //回复
	    $answers = $this->_getQuestionAnswer($question_id);
	    $selected = array_merge($selected, $answers['answers']);
	    
	    $ids = $answers['ids'];
	    if (empty($ids)) {
	    	return false;
	    }
	    //追问
	    $list = R::findAll(TABLENAME_ASKADDTO, " ans_id in ( " . implode(',', $ids) . " )");
	    
	    if (empty($list)) {
	        return false;
	    }
	    
	    $has_reply_ids = array();
	    $questions = array();
	    $index = 0;
	    foreach ($list as $key => $question) {
	        $questions[$index]['asked_id'] = $question->id;
	        $questions[$index]['question_type'] = 2;
	        $questions[$index]['up_id'] = $question->ans_id;
	        $questions[$index]['asked'] = $question->info;
	        $questions[$index]['has_reply'] = 'no';
	        
	        $obj = R::load(TABLENAME_ASKADDTO, $question_id);
	        if (!empty($obj->id)) {
	        	$has_reply_ids[] = $question->id;
	        	$questions[$index]['has_reply'] = 'yes';
	        }
	        
	        /*
	        if ($question->mode == 0) {//追问回复
	            $questions[$index]['question_type'] = 1;
	        }
	        */
	        
	        $index++;
	    }
	    
	    $selected = array_merge($selected, $questions);
	    if ($has_reply_ids) {
	        return $selected;
	        //print_r($selected);
	    	//return array_merge($selected, $this->_getAllContent($has_reply_ids, $selected));
	    }
	    return true;
	}
	// }}}
	// {{{ protected function _questionAsked()
	
	/**
	 * 追问
	 * */
	protected function _questionAsked($data) {
	    try {
            $data['hospital'] = $data['domain'];
            //消息分发推送dispatcher
            $this->_dispatcher($data, 'addto');
	    } catch (Exception $e) {
	        return array('type'=>'question_asked', 'question_asked'=>'no', 'msg'=>$e->getMessage());
	    }
	    return array('type'=>'question_asked', 'question_asked' => 'yes', 'msg'=>$info->get_id());
	}
	
	// }}}
	// {{{ protected function _getQuestionAnswer()
	
	/**
	 * 获取问题的回复
	 * */
	protected function _getQuestionAnswer($question_id) {
	    if (!is_array($question_id)) {
	    	$question_id = array($question_id);
	    }
	    try {
	        
	        $list = R::findAll(TABLENAME_ANSWER, "ask_id in ( " . implode(',', $question_id) . " )");
	        $answers = array();
	        $reply_ids = array();
	        
	        $index = 0;
	        foreach ($list as $key => $answer) {
	            $reply_ids[] = $answer['id'];
	            $answers[$index]['question_type'] = 1;
	            $answers[$index]['reply_id'] = $answer['id'];
	            $answers[$index]['up_id'] = $answer['ask_id'];
	            $answers[$index]['reply'] = $answer['content'];
	            
	            $doctor = R::load(TABLENAME_DOCTOR, $answer['doc_id']);
	            $reply_num = R::getRow('select count(doc_id) as reply_num from ' . TABLENAME_ANSWER);
	            
	            $answers[$index]['doctor'] = array();
	            $answers[$index]['doctor']['doctor_id'] = $doctor['id'];
	            $answers[$index]['doctor']['doctor_name'] = $doctor['name'];
	            $answers[$index]['doctor']['img_url'] = $doctor['pic'];
	            $answers[$index]['doctor']['reply_num'] = $reply_num['reply_num'];
	            $answers[$index]['doctor']['position'] = $doctor['position'];
	            
	            $answers[$index]['doctor']['hospital'] = $this->__hos_name;
	            $index++;
	        }
	    } catch (Exception $e) {
	        return array();
	    }
	    return array('answers'=>$answers, 'ids'=>$reply_ids);
	}
	
	// }}}
	// {{{ protected function _disatcher()
	
	/**
	 * 消息推送
	 * 
	 * @param $interface 推送接口 提问：distribute 追问：addto
	 * */
	protected function _dispatcher($data, $interface = 'distribute') {
	    //调用接口
	    $url = "http://" . $data['domain'] . "/interface/hwibsc/" . $interface . ".php";
	    $method = "format" . ucfirst($interface) . "Params";
	    $params = $this->$method($data);
	    
	    try{
	        $this->sendMessage($url, $params, $interface);
	    } catch (Exception $e) {
	        continue;
	    }
	    
	}
	
	// }}}
	// {{{ protected function formatDistributeParams()
	
	/**
	 * 格式化提问接口数据
	 * */
	protected function formatDistributeParams($data) {
	    $user = $this->_getuser($data['user_id']);
	    
	    $sign = md5('hwibs' . time() . $data['domain']);
	    $img_url = empty($data['img_url']) ? '' : NETADDRESS . $data['img_url'];
	    $params = '';
	    $params .= 'name=' . $user['acct_name'];
	    $params .= '&domain=' . $data['domain'];
	    $params .= '&source_domain=' . $data['domain'];
	    $params .= '&question_id=' . $data['question_id'];
	    $params .= '&sign=' . $sign;
	    $params .= '&time=' . time();
	    $params .= '&subject=' . $data['title'];
	    $params .= '&description=' . $data['description'];
	    $params .= '&phone=' . $user->mobile;
	    $params .= '&age=' . $data['age'];
	    $params .= '&gender=' . $data['gender'];
	    $params .= '&history=';
	    $params .= '&condtion=';
	    $params .= '&city=' . $user['city'];
	    $params .= '&assay_pic=' . $img_url;
	    $params .= '&source_hospital=' . $this->__hos_name;
	    $params .= '&department=' . $data['departments'];
	    $params .= '&user_alis=' . $data['user_id'];
	    $params .= '&pic=' . $img_url;
	    
	    return $params;
	}
	// }}}
	// {{{ protected function formatAddtoParams()
	
	/**
	 * 格式化追问接口数据
	 * */
	protected function formatAddtoParams($data) {
	    $answer = R::load(TABLENAME_ANSWER, $data['reply_id']);
	    
	    $sign = md5('hwibs' . time() . $data['domain']);
	    $params = '';
	    $params .= '&domain=' . $data['domain'];
	    $params .= '&sign=' . $sign;
	    $params .= '&time=' . time();
	    $params .= '&question_id=' . $answer->ask_id;
	    
	    $params .= '&content=' . $data['asked'];
	    $params .= '&parent_id=' . $answer->ask_id;
	    $params .= '&add_id=0';
	    
	    return $params;
	}
	// }}}
	// {{{ 发送消息
	
	/**
	 * 开始发送消息
	 * */
	protected function sendMessage($url, $params, $interface) {
	    $error_log = HWIBSC_LOG .$interface.'_error.log';
	    try{
	        $ch = curl_init();
	        curl_setopt($ch, CURLOPT_URL, $url);
	        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	        curl_setopt($ch, CURLOPT_POST, 1);
	        curl_setopt($ch, CURLOPT_POSTFIELDS, $params);
	        $output = curl_exec($ch);


	        if ($output === false)
	        {
	            $msg = curl_error($ch);
	            error_log(date('Y-m-d H:i:s') . ' 推送错误:' . $msg." ".$url . PHP_EOL, 3, $error_log);
	            return false;
	        }
	       
	        $res = json_decode($output, true);
	        
	        
	        if (isset($res['status']) && $res['status'] === true) {
	            return true;
	        } else {
	        	
	            $msg = $res['msg'] ? $res['msg'] : '无效的地址';
	            error_log(date('Y-m-d H:i:s') . ' error:' . PHP_EOL . $msg . PHP_EOL, 3, $error_log);
	            return false;
	             
	        }
	        curl_close($ch);
	    } catch (Exception $e) {
	        $msg = '异常：' . $e->getMessage();
	        error_log(date('Y-m-d H:i:s') . ' error:' . PHP_EOL . $msg . PHP_EOL, 3, $error_log);
	        return false;
	    }
	}
	// }}}
	
	/**
	 * Request数据处理
	 */
	public function getRequest($name = '', $default = '') {
	    if (! empty ( $name )) {
	        if (isset ( $_REQUEST [$name] ) && strlen ( $_REQUEST [$name] ) > 0) {
	            return $_REQUEST [$name];
	        } else {
	            return $default;
	        }
	    }
	
	    return $_REQUEST;
	}
	
	/**
	 * 总控用户验证方法
	 */
	protected function _getuser($user_id = '') {
	    try {
            $url = 'http://www.boyicms.com/interface/hma/OnlineInterface.php';
            $post_data = array('part'=>json_encode(array(
                'type' => 'get_user',
            	'user_id' => $user_id
            )));
            
            $ch = curl_init ();
            curl_setopt ( $ch, CURLOPT_URL, $url );
            curl_setopt ( $ch, CURLOPT_RETURNTRANSFER, 1 );
            curl_setopt ( $ch, CURLOPT_POST, 1 );
            curl_setopt ( $ch, CURLOPT_POSTFIELDS, $post_data );
            $data = curl_exec ( $ch );
            curl_close ( $ch );
        } catch ( Exception $e ) {
            return false;
        }
	        
        $user = json_decode ( $data, true );
	        	
	    return $user;    
	}
	
}
new OnlineInterface();
