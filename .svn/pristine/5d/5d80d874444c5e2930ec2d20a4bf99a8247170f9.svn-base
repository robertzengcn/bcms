<?php

class ResVationController extends Controller {

    private $service;

    function __construct() {
        parent::__construct();
        
        $this->service = new ResVationService();
        
    }

    function filter() {
        $filterService = new FilterService();
        $filterService->addFunc($filterService::$SQLINJECTION);
       // $filterService->addFunc($filterService::$WORKERISLOGIN);
        $filterService->addFunc($filterService::$FILERPLUSHTIME);
        $filterService->addFunc($filterService::$WORKERLOGHISTORY);

        return $filterService->execute();
    }
	
    /**
     * 根据科室ID，医生ID，日期查找数据
     */
    public function getDataByDocID() {
    	if(isset($_REQUEST['docID'])&&$_REQUEST['docID']){
    		if(isset($_REQUEST['depID'])&&$_REQUEST['depID']){
    			if(isset($_REQUEST['date'])&&$_REQUEST['date']){
    				$_REQUEST['date']=strtotime($_REQUEST['date']);
    				$dat=$this->service->check_date($_REQUEST['date'],$_REQUEST['depID'],$_REQUEST['docID']);
    				if($dat){
    					$array=array('statu'=>true,'code'=>null,'msg'=>'该医生当日己有排班记录，不可再新增，若要修改请返回列表修改！','data'=>$dat);
    					echo json_encode($array);
    				}else{
    					$array=array('statu'=>false,'code'=>null,'msg'=>'本日没有该医生的排班记录！','data'=>null);
    					echo json_encode($array);
    				}
    			}
    		}
    	}
    }
    
    
    /**
     * 添加数据
     */
    public function add() {
        
        if (1 > (int) $_REQUEST['along']) {
            throw new ValidatorException(144);
        }
        if (! isset($_REQUEST['start']) || empty($_REQUEST['start'])) {
            throw new ValidatorException(145);
        }
        if (! isset($_REQUEST['end']) || empty($_REQUEST['end'])) {
            throw new ValidatorException(146);
        }
        $flag = false;
        $arr = array();
        foreach ($_REQUEST['date'] as $k => $v) {
            if ($v == '') {
                unset($_REQUEST['date'][$k]);
            } else {
                $arr[$v][] = $k;
                $flag = true;
            }
        }
        if (! $flag) {
            throw new ValidatorException(143);
        }
        unset($_REQUEST['date']);
        foreach ($arr as $k => $val) {
            $_REQUEST['date'] = $k;
            foreach ($val as $v) {
                $str = strtolower(str_replace($_REQUEST['date'], '', $v));
                $_REQUEST[$str] = $_REQUEST[$v]['start'] . '-' . $_REQUEST[$v]['end'];
            }
            $_REQUEST['morning'] = isset($_REQUEST['morning']) ? $_REQUEST['morning'] : '-';
            $_REQUEST['afternoon'] = isset($_REQUEST['afternoon']) ? $_REQUEST['afternoon'] : '-';
            $_REQUEST['night'] = isset($_REQUEST['night']) ? $_REQUEST['night'] : '-';
            $_REQUEST['date'] = strtotime($k);
            $this->blindParams($reservation = new ResVation());
            $res = $this->service->save($reservation);
            // 添加在详细表中去
            foreach ($val as $v) {
                $this->addDetail($k, $v, $_REQUEST);
            }
            unset($_REQUEST['morning'], $_REQUEST['afternoon'], $_REQUEST['night']);
        }
        echo json_encode($res);
    }
    
    
    /*
     * 添加当次排班
     * */
    
    public function addResvation(){    	
    	if(!isset($_REQUEST['morning'])||$_REQUEST['morning']==''){
    		if(!isset($_REQUEST['afternoon'])||$_REQUEST['afternoon']==''){
    			if(!isset($_REQUEST['night'])||$_REQUEST['night']==''){
    				throw new ValidatorException(193);
    			}
    		}
    	}
    	if (! isset($_REQUEST['date']) || empty($_REQUEST['date'])) {
    		throw new ValidatorException(162);
    	}
    	if (! isset($_REQUEST['department_id']) || empty($_REQUEST['department_id'])) {
    		throw new ValidatorException(27);
    	}
    	if (! isset($_REQUEST['doctor_id']) || empty($_REQUEST['doctor_id'])) {
    		throw new ValidatorException(28);
    	}
    	if(isset($_REQUEST['morning'])&&$_REQUEST['morning']&&isset($_REQUEST['morning_source'])&&$_REQUEST['morning_source']){
    		$_REQUEST['morning_point']=$this->getTimePoint($_REQUEST['morning'],$_REQUEST['morning_source']);
    		$_REQUEST['time_point']=$_REQUEST['morning_point'];
    	}
    	if(isset($_REQUEST['afternoon'])&&$_REQUEST['afternoon']&&isset($_REQUEST['afternoon_source'])&&$_REQUEST['afternoon_source']){
    		$_REQUEST['afternoon_point']=$this->getTimePoint($_REQUEST['afternoon'],$_REQUEST['afternoon_source']);
    		if(isset($_REQUEST['time_point'])&&$_REQUEST['time_point']){
    			$_REQUEST['time_point'].='@0@'.$_REQUEST['afternoon_point'];
    		}else{
    			$_REQUEST['time_point']=$_REQUEST['afternoon_point'];
    		}
    	}
    	if(isset($_REQUEST['night'])&&$_REQUEST['night']&&isset($_REQUEST['night_source'])&&$_REQUEST['night_source']){
    		$_REQUEST['night_point']=$this->getTimePoint($_REQUEST['night'],$_REQUEST['night_source']);
    		if(isset($_REQUEST['time_point'])&&$_REQUEST['time_point']){
    			$_REQUEST['time_point'].='@0@'.$_REQUEST['night_point'];
    		}else{
    			$_REQUEST['time_point']=$_REQUEST['night_point'];
    		}
    	}    	
    	$_REQUEST['date']=strtotime($_REQUEST['date']);
    	$_REQUEST['state'] = $_REQUEST['state'] ? $_REQUEST['state'] : 0; //0可预约，1己停诊，2己过期
    	$this->blindParams($reservation = new ResVation());
    	$res=$this->service->save($reservation);    	
    	echo json_encode($res);
    }
    
    /**
     * 裂解时间段
     */
    public function getTimePoint($times,$num){
    	$timeArr=explode('-', $times);
    	$dateNow=date('Y-m-d',time());
    	$begintime=strtotime($dateNow.' '.$timeArr[0]);
    	$endtime=strtotime($dateNow.' '.$timeArr[1]);
    	$restTime=$endtime-$begintime;
    	$AverageTime=floor($restTime/$num);
    	$str=$timeArr[0];
    	for($i=1;$i<$num;$i++){
    		$date=$begintime+$i*$AverageTime;
    		$str.='@'.date('H:i',$date);
    	}
    	$str.='@'.$timeArr[1];
    	return $str;
    }
    
    
    /**
     * 添加预约挂号数量
     * 
     * */
    public function add_num(){
    	if (1 > (int) $_REQUEST['num']) {
    		throw new ValidatorException(169);
    	}
    	
    	$this->blindParams($reservation = new ResVation());
    	$res = $this->service->addnum($reservation,$_REQUEST['num']);
    	$array=array('statu'=>true,
    			     'code'=>null,
    	              'msg'=>null,
    	             'date'=>null);
    	echo json_encode($array);
    }
    

    /**
     * 设置添加到详细页的有效值
     *
     * @param unknown_type $date
     * @param unknown_type $key
     * @param unknown_type $array
     */
    public function addDetail($date, $key, $array) {
        // echo $date,'<br/>',$key;exit;
        $detail = new ReservationDetail();
        $detail->department_id = $array['department_id'];
        $detail->doctor_id = $array['doctor_id'];
        $detail->statu = '待约';
        $detail->date = strtotime($date);
        $start = $array[$key]['start'];
        $end = $array[$key]['end'];
        $t = strtotime($date . ' ' . $end) - strtotime($date . ' ' . $start);
        $along = $array['along'] * 60;
        $count = $t / $along;
        $time = strtotime($date . ' ' . $start);
        // $detail->times = $time;
        // print_r($detail);exit;
        for ($i = 1; $i <= $count; $i ++) {
            $detail->times = $time;
            $this->addToDetail($detail);
            $time += $along;
        }
    }

    /**
     * 查询指定的数据
     */
    public function query() {    	
        $result = $this->service->query($_REQUEST);
        $ttl = $this->service->totalRows($_REQUEST); 
        $total=$this->service->gettotal();
        if(isset($_REQUEST['draw'])&&strlen($_REQUEST['draw'])>0){
        	$draw=$_REQUEST['draw'];
        }else{
        	if(isset($_REQUEST['page'])&&strlen($_REQUEST['page'])>0){
        		$draw=$_REQUEST['page'];
        	}else{
        		$draw=1;
        	}
        }        
        echo json_encode(array(
        		'draw'=>$draw,
        		'recordsTotal'=>$total,
        		'recordsFiltered'=>$ttl,
        		'data'=>$result->data,
        		'rows' => $result->data,//预留保证原来的程序能够顺利运行
        		'ttl' => $ttl
        ));       
    }
    
    /**
     * 获取所有满足条件的医生排班信息列表
     * */
    public function getAllresvations() {    	
    	$data = $this->service->getAllresvations();      	
    	echo json_encode($data);
    }
    
    
    /**
     * 根据条件获取医生
     */
    public function getdoctors() {
    	$where = array();
    	$week = strtotime(date('Y-m-d', time()));
    	$where['department_id'] = isset($_REQUEST['dep']) ? $_REQUEST['dep'] : null;
    	$where['time'] = isset($_REQUEST['time'])&&strlen($_REQUEST['time'])>0 ? (int)$_REQUEST['time'] : '';
    	$mon=strtotime('last monday 0:0:0');    	
    	if(isset($_REQUEST['date'])&&strlen($_REQUEST['date'])>0){
    		$where['date'] = $mon+((int)$_REQUEST['date']-1)*86400;
    	}else{
    		$where['date'] = null;
    	}
    	$result = $this->service->getdoctors($where);
    	echo json_encode(array(
    			'data' => $result,
    			'ttl' => count($result->data)
    	));
    }
   

    /**
     * 根据id获取一条数据 .
     * ..
     */
    public function get() {
        $this->blindParams($reservation = new ResVation());        
        $res = $this->service->get($reservation);    
        echo json_encode($res);
    }

    /**
     * 修改数据 .
     * ..
     */
    public function edit() {
        if (1 > (int) $_REQUEST['along'] || (int) $_REQUEST['along'] > 30) {
            throw new ValidatorException(144);
        }
        $flag = false;
        foreach ($_REQUEST['date'] as $k => $v) {
            if ($v != '') {
                $k = str_replace("'", '', $k);
                $morning = $k . 'Morning';
                $afternoon = $k . 'Afternoon';
                $night = $k . 'Night';
                if ($_REQUEST[$morning]['start'] != '' && $_REQUEST[$morning]['end'] != '') {
                    $flag = true;
                }
                if ($_REQUEST[$afternoon]['start'] != '' && $_REQUEST[$afternoon]['end'] != '') {
                    $flag = true;
                }
                if ($_REQUEST[$night]['start'] != '' && $_REQUEST[$night]['end'] != '') {
                    $flag = true;
                }
            }
        }
        if (! $flag) {
            throw new ValidatorException(134);
        }
        $date = $_REQUEST['date'];
        foreach ($date as $k => $v) {
            if ($v) {
                unset($_REQUEST['date']);
                $_REQUEST['date'] = $v;
                $k1 = str_replace("'", '', $k) . 'Morning';
                $k2 = str_replace("'", '', $k) . 'Afternoon';
                $k3 = str_replace("'", '', $k) . 'Night';
                $_REQUEST['morning'] = $_REQUEST[$k1]['start'] . '-' . $_REQUEST[$k1]['end'];
                $_REQUEST['afternoon'] = $_REQUEST[$k2]['start'] . '-' . $_REQUEST[$k2]['end'];
                $_REQUEST['night'] = $_REQUEST[$k3]['start'] . '-' . $_REQUEST[$k3]['end'];
                $_REQUEST['date'] = strtotime($v);
                $this->blindParams($reservation = new ResVation());
                $res = $this->service->update($reservation);
                // 修改详细表
                // 先删除原来的数据
                $array = array(
                    'department_id' => $_REQUEST['oldDepartment'],
                    'doctor_id' => $_REQUEST['oldDoctor'],
                    'date' => strtotime($_REQUEST['oldDate'])
                );
                $this->deleteAll($array);
                // 在重新分配后加入数据库
                if ($_REQUEST['morning']) {
                    $key = $k1;
                    $this->editDetai($v, $key, $_REQUEST);
                }
                if ($_REQUEST['afternoon']) {
                    $key = $k2;
                    $this->editDetai($v, $key, $_REQUEST);
                }
                if ($_REQUEST['night']) {
                    $key = $k3;
                    $this->editDetai($v, $key, $_REQUEST);
                }
            }
        }
        echo json_encode($res);
    }

    /**
     * 编辑详细表中的数据...
     *
     * @param unknown_type $date
     * @param unknown_type $key
     * @param unknown_type $array
     */
    public function editDetai($date, $key, $array) {
        $detail = new ReservationDetail();
        $detail->department_id = $array['department_id'];
        $detail->doctor_id = $array['doctor_id'];
        $detail->statu = '待约';
        $detail->date = strtotime($date);
        $t = strtotime($date . ' ' . $array[$key]['end']) - strtotime($date . ' ' . $array[$key]['start']);
        $along = $array['along'] * 60;
        $count = $t / $along;
        $time = strtotime($date . ' ' . $array[$key]['start']);
        $detail->times = $time;
        for ($i = 1; $i <= $count; $i ++) {
            $detail->times = $time;
            $this->addToDetail($detail);
            $time += $along;
        }
    }
    
    /*
     * 更新排班表
     * 
     * */
    
    
    public function update_num(){
    	if(!isset($_REQUEST['morning'])||$_REQUEST['morning']==''){
    		if(!isset($_REQUEST['afternoon'])||$_REQUEST['afternoon']==''){
    			if(!isset($_REQUEST['night'])||$_REQUEST['night']==''){
    				throw new ValidatorException(193);
    			}
    		}
    	}
    	if (! isset($_REQUEST['date']) || empty($_REQUEST['date'])) {
    		throw new ValidatorException(162);
    	}
    	if (! isset($_REQUEST['department_id']) || empty($_REQUEST['department_id'])) {
    		throw new ValidatorException(27);
    	}
    	if (! isset($_REQUEST['doctor_id']) || empty($_REQUEST['doctor_id'])) {
    		throw new ValidatorException(28);
    	}
    	if(isset($_REQUEST['morning'])&&$_REQUEST['morning']&&isset($_REQUEST['morning_source'])&&$_REQUEST['morning_source']){
    		$_REQUEST['morning_point']=$this->getTimePoint($_REQUEST['morning'],$_REQUEST['morning_source']);
    		$_REQUEST['time_point']=$_REQUEST['morning_point'];
    	}
    	if(isset($_REQUEST['afternoon'])&&$_REQUEST['afternoon']&&isset($_REQUEST['afternoon_source'])&&$_REQUEST['afternoon_source']){
    		$_REQUEST['after_point']=$this->getTimePoint($_REQUEST['afternoon'],$_REQUEST['afternoon_source']);
    		if(isset($_REQUEST['time_point'])&&$_REQUEST['time_point']){
    			$_REQUEST['time_point'].='@0@'.$_REQUEST['after_point'];
    		}else{
    			$_REQUEST['time_point']=$_REQUEST['after_point'];
    		}
    	}
    	if(isset($_REQUEST['night'])&&$_REQUEST['night']&&isset($_REQUEST['night_source'])&&$_REQUEST['night_source']){
    		$_REQUEST['night_point']=$this->getTimePoint($_REQUEST['night'],$_REQUEST['night_source']);
    		if(isset($_REQUEST['time_point'])&&$_REQUEST['time_point']){
    			$_REQUEST['time_point'].='@0@'.$_REQUEST['night_point'];
    		}else{
    			$_REQUEST['time_point']=$_REQUEST['night_point'];
    		}
    	}    	
    	$this->blindParams($reservation = new ResVation());    	
    	$res = $this->service->update_num($reservation);    	
    	echo json_encode($res);    
    }

    /**
     * 删除记录 
     * 
     */
    public function delete() {
        if (is_array($_REQUEST['id'])) {
            $reservations = $_REQUEST['id'];
        } else {
            $reservations = array(
                $_REQUEST['id']
            );
        }
        $res = $this->service->deleteBatch($reservations);

        echo json_encode($res);
    }

    /**
     * 添加到详细表中 .
     * ..
     */
    public function addToDetail($detail) {
        $re = $this->service->addToDetail($detail);
    }
   
    
    /**
     * 获取详细列表...
     */
    public function getDetail() {
        $this->blindParams($reservation = new ResVation());
        $res = $this->service->get($reservation);
        $_REQUEST['department_id'] = $res->data->department_id;
        $_REQUEST['doctor_id'] = $res->data->doctor_id;
        foreach ($res->data->date as $v) {
            $_REQUEST['date'] = strtotime($v);
        }
        $result = $this->service->getDetail($_REQUEST);
        $ttl = $this->service->getCount($_REQUEST);

        echo json_encode(array(
            'rows' => $result->data,
            'ttl' => $ttl->data
        ));
    }
    /**
     * 按条件获取
     */

    public function getReservation($dep,$doc,$date) {    	
    	$_REQUEST['normaldate']=$_REQUEST['date'];
        $_REQUEST['date'] = strtotime($_REQUEST['date']); 
        $result = $this->service->getDetail($_REQUEST);
        echo json_encode( $result );
    }

    public function getFieldStr($fields = array()){
        $result = array();
        foreach ($fields as $key=>$value) {
            //计算下班时间
            $end_h = date('H', strtotime($value['max']));
            $end_i = intval(date('i', strtotime($value['max'])));
    
            if ($end_i>30) {
                $end = intval($end_h)+1 . ":00";
            } else {
                $end = $end_h . ":30";
            }
    
            //var_dump($value['field']);
            //拼接时间段
            $min = strtotime($value['min']);
            $max = strtotime($end);
    
            for ($i=$min; $i<=$max+3600; $i=$i+3600) {
                $end_time = $i+3600;
                if ($end_time>$max) {
                    $end_time = $max;
                }
                 
                if ($end_time<=$i) {
                    continue;
                }
                $key = date('H:i', $i) . '-' . date('H:i', $end_time);
                $result[$key]['available'] = 0;
                $result[$key]['unavailable'] = 0;
                foreach ($value['field'] as $v) {
                    $stamp = strtotime($v['times']);
                    if ($stamp>=$i && $stamp < ($i+3600)) {
                        if ('待约' == $v['statu']) {
                            $result[$key]['times'][] = $v['times'];
                            $result[$key]['available']++;
                        } else {
                            $result[$key]['unavailable']++;
                        }
                    }
                }
            }
        }
        return $result;
    } 
    
    

    /**
     * 是否批量删除...
     */
    public function deleteDetail() {
        // print_r($_REQUEST);
        if (is_array($_REQUEST['id'])) {
            $detailIds = $_REQUEST['id'];
        } else {
            $detailIds = array(
                $_REQUEST['id']
            );
        }
        $res = $this->service->deleteDetail($detailIds);

        echo json_encode($res);
    }

    /**
     * 根据科室，医生，日期删除详细表中的记录
     */
    public function deleteAll($arr) {
        $res = $this->service->deleteAll($arr);
    }

    /**
     * 得到详细表中所有的数据
     */
    public function getDetailAll() {
        $detailAll = $this->service->getDetailAll();
        $jsonStr = json_encode($detailAll->data);
        $filename = ABSPATH . '/interface/Reservation.json';
        file_put_contents($filename, $jsonStr);
        $filename = NETADDRESS . '/interface/Reservation.json';
        $detailAll->filename = $filename;
        echo json_encode($detailAll);
    }
    

    
    

    /**
     * 处理开始时间 结束时间...
     */
    public function process() {
        $array = $_REQUEST['data'];       
        $time1 = strtotime($array['start']);
        if (strtolower($time1) == 0) {
            throw new ValidatorException(145);
        }
        $time2 = strtotime($array['end']);
        if (strtolower($time2) == 0) {
            throw new ValidatorException(146);
        }
        $time3 = $time2 - $time1;
        $count = $time3 / 86400;
        $time = $time1;
        $date = array();
        $week = array();
        $date[] = $array['start'];
        $week[] = date('w', $time1);
        for ($i = 1; $i < $count; $i ++) {
            $time = $time + 86400;
            $date[] = date('Y-m-d', $time);
            $week[] = date('w', $time);
        }
        if ($time1 != $time2) {
            $date[] = $array['end'];
            $week[] = date('w', $time2);
        }
        $arr = array();
        $arr['date'] = $date;
        $arr['week'] = $week;
        $arr['statu'] = true;
        echo json_encode($arr);
    }

    /**
     * 将预约者添加到预约表中去,修改未约成已约
     */
    public function reserUser() {  
    	 $reservation = new ResVation();
    	 $reservation->id=$_REQUEST['time'];
    	 $reserservice = new ResVationService();//here
    	 $ress=$reserservice->get($reservation);
    	 //计算该医生本轮排班是否还有号源
    	 $num=($ress->data->along)-($ress->data->mark);
    	 if($_REQUEST['restime']==null){
    	 	throw new ValidatorException(144);
    	 }
    	 $arr = explode('-',$_REQUEST['restime']);
    	 if (! $reservation->isHours($arr[0])) {
    	 	throw new ValidatorException(132);
    	 }
    	 //$num>0医生仍有号源未预约
    	 if($num>0){    		    		
    		$resbookinginfoservice=new ResBookingInfoService();
    		$resbooking = new ResBookingInfo();
    		$resbooking->doctor_id=$ress->data->doctor_id;
    		$resbooking->department_id=$ress->data->department_id;
    		$resbooking->date=strtotime($ress->data->date);    		   		
    		$resbooking->times=strtotime($ress->data->date.' '.$arr[0]);
    		$resbooking->username=$_REQUEST['name'];
    		$resbooking->telephone=$_REQUEST['hometel'];
    		$resbooking->card=$_REQUEST['card'];
    		$resbooking->statu='已约';		
    		$resv=$resbookinginfoservice->save($resbooking);
    		if($resv->statu){
    			$reserservice->addresnum($reservation);
    			$reserservice->insertuser($_REQUEST['name'],$_REQUEST['sex'],$_REQUEST['age'],$_REQUEST['date'],$resschedule->times,$_REQUEST['address'],$_REQUEST['hometel'],$_REQUEST['email'],$_REQUEST['ill'],0,$resv->data->id);
    		}
    		$result=array('statu'=>true,
    				'code'=>0,
    				'msg'=>null,
    				'data'=>null
    		); 
    	}else{
    		$result=array('statu'=>false,
    				'code'=>170,
    				'msg'=>'\u5df2\u6ca1\u6709\u5269\u4f59\u53f7\u6570\u53ef\u9884\u7ea6',
    				'data'=>null
    		);
    	}
    	 

          
        echo json_encode($result);
    }
    /**
     * 获取排班信息
     */
    public function getPaiban() {
    	$page=empty($_REQUEST['page']) ? 1 : $_REQUEST['page'];
    	$size=empty($_REQUEST['size']) ? 10 : $_REQUEST['size'];
    	$ttl = $this->service->getPaibanCount($_REQUEST);
    	$result = $this->service->getPaiban($_REQUEST);
    	echo json_encode(array(
    		'statu'=>true,
            'rows' => $result->data,
            'count' => $ttl->data,
    		'page' => $page,
    		'size' => $size
        ));
    }
    
    /*
     * 设置停诊
    *
    * */
    public function setstop(){
           if (! isset($_REQUEST['id']) || empty($_REQUEST['id'])) {
	           throw new ValidatorException(7);
	       }
    	 
    	$this->blindParams($reservation = new ResVation());   	
    	
    	$this->service->setstop($reservation);
    	$res=array('statu'=>true,
    			'code'=>null,
    			'msg'=>null,
    			data=>null);
    	echo json_encode($res);
    	
    }
    
    /*
     * 显示所在一周的预约排班信息
     * */
    public function showweekreser(){
    	if(!isset($_REQUEST['date'])||empty($_REQUEST['date'])){
    		throw new ValidatorException(162);
    	}
    	$reservation = new ResVation();
    	$check=$reservation->checkDateIsValid($_REQUEST['date'],array('Y-m-d'));
    	if(!$check){
    		throw new ValidatorException(171);
    	}
    	
    	$lastday=strtotime($_REQUEST['date']." Sunday");
    	$startday=strtotime(date('Y-m-d',$lastday)." - 6 days");
    	
    	$arrweek=array();
    	$reserverser=new ReservationService();

    		
    	//$_REQUEST['date'] = strtotime($startday);
    		
    	
    	$resudate= $reserverser->getweekreservation($startday,$lastday);

    	foreach ($resudate as $key=>$val){
    		$arrweek[$key]['id']=$val->id;
    		$arrweek[$key]['department_id']=$val->department_id;
    		$arrweek[$key]['doctor_id']=$val->doctor_id;
    		$arrweek[$key]['along']=$val->along;
    		$arrweek[$key]['mark']=$val->mark;
    		$arrweek[$key]['week']=date('w',$val->date);
    		$arrweek[$key]['department']=$val->department;
    		$arrweek[$key]['doctor']=$val->doctor;
    		if($val->morning){
    			$arrweek[$key]['timetype']='mon';
    			$arrweek[$key]['time']=$val->morning;
    		}elseif($val->afternoon){
    			$arrweek[$key]['timetype']='aft';
    			$arrweek[$key]['time']=$val->afternoon;
    		}else{
    			$arrweek[$key]['timetype']='nig';
    			$arrweek[$key]['time']=$val->night;
    		}
    	}
    	
//     print_r(array_merge($arrweek));
//     exit();
    		
    	//$results=$arrweek;
    		
    	$results=array('statu'=>true,
    			'code'=>0,
    			'msg'=>null,
    			'data'=>array_merge($arrweek)
    	);
    	echo json_encode($results);
    	
    }
    
}