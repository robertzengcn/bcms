<?php

class MemberService extends BaseService {
	private $boyiuserurl="http://www.hwibsc.com/interface/hma/UserInterface.php";
    /**
     * 构造函数
     */
    public function __construct() {
        $this->dao = new MemberDAO();
    }

    /**
     * 批量删除
     *
     * @param array $arr(id,...)
     * @return boolean
     */
     public function deleteBatch($ids) {
        Entity::isIds($ids);   // 验证ids是否合法
        $scoreruleArray = $this->dao->getBatch($ids);

        return $this->dao->deleteBeans($scoreruleArray);
    } 

    /**
     * 获取一条数据
     *
     * @param Entity $scorerule
     * @return Result
     */
    public function get($scorerule) {
        $this->dao->get($scorerule->id, $scorerule);
 
        return $this->success($scorerule);
    }


    /**
     * 获得grid数据
     *
     * @param array $where
     *            查询条件
     * @return Result
     */
    public function query($where) {
        $scoreruleArray = $this->dao->query($where);
        
        foreach($scoreruleArray as $key=>$val){
        	$scoreruleArray[$key]->last_log=date('Y-m-d H:i',$val->last_log);
        	
        }
       

        return $this->success($scoreruleArray);
    }
    
    public function getmemberbyname($username){
    	
    	
    	if(is_string($username)){
    		$arr=array('username'=>$username);
    		return $this->dao->getmemberbyname($arr);
    	}elseif(is_array($username)){
    		
    		return $this->dao->getmemberbyname($username);
    	}else{
    		throw new ValidatorException(140);
    	}
    }
    
    /*
     * 获取用户积分数
     * */
    public function getscore($memberid){

    	if(is_int($memberid)){
    		$arr=array('id'=>$memberid);
    		return $this->dao->getscoreamount($arr);
    	}elseif(is_array($memberid)){
    	
    		return $this->dao->getscoreamount($memberid);
    	}else{
    		throw new ValidatorException(140);
    	}
    	//return $this->dao->getscoreamount();
    }
    
    /**
     * 发送post请求
     * @param string $url 请求地址
     * @param array $post_data post键值对数据
     * @return string
     */
    public function send_post($url, $post_data) {
    
    	$ch = curl_init();
    	$timeout = 60000*10;
    	curl_setopt($ch, CURLOPT_URL, $url);
    	curl_setopt($ch, CURLOPT_POST, true);
    	curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);
    	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    	curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
    	$result = curl_exec($ch);
    	curl_close($ch);
    	return $result;
    }

    /**
     * 保存数据
     *
     * @param Entity $scorerule
     * @return Result
     */
    public function save($member) {
    	
         $member->validate();        
        // 获取class对象并插入数据
        $this->dao->save($member);
      
        return $this->success();
    }
    
    /*
     *添加数据 
     * */
    public function addmember($arr){
    	$member=new Member();
    	
    	$mresult=$this->getmembyname(array('username'=>$arr['username']));
    	
    	if(empty($mresult->data)){//用户表里无此用户时添加
    		
    	$member->username=$arr['username'];
    	if(isset($arr['telephone'])){
    	$member->telephone=$arr['telephone'];
    	$member->ownscore=0;
    	}
    	$result=$this->dao->save($member);
        
    	}
    	return $this->success($result);
    }
    
    
    
    /*
     * 检查是否有数据存在，有的话返回所有数据
     * */
    
    public function checkdate(){
    	return $this->dao->getdate();
    }
    /*
     * 删除所有数据
     * */
    
    public function delall(){
    	
    	$rs=$this->dao->delall();
    	return $this->success($rs);
    }
    
    /*
     * 根据type取值
     * @param int $type
     * */
    public function getbytype($type){
    	$arr=array('type'=>$type);
    	$rs=$this->dao->getbytype($arr);
    	return $this->success($rs);
    }

    /**
     * 更新数据
     *
     * @param Entity $commodity
     * @return Result
     */
    public function update($scorerule) {
    //    $commodity->updatetime = time();
    	
        $scorerule->validate();
        $this->dao->beginTrans();
        return $this->dao->update($scorerule);
    }
    
    /*
     * 积分商城前台获取用户所拥有积分数
     * */
    public function getmemberscore($arr){
    	$member=new Member();
    	$member->id=$arr['id'];
    	$this->dao->get($member->id, $member);
    	
    	return $this->success($member);
    	
    }
    
    /*
     *扣减用户积分数量 
     * 
     * */
    public function reducescore($arr){
    	$this->dao->reducescore($arr);
    		    	
    }
    
    /*
     *根据用户名查找用户 
     *@param array('username'=>username);
     * */
    public function getmembyname($arr){
    	$result=$this->dao->getmembyname($arr);
    	

    	return $this->success($result);
    }
    
    /*
     * 
     * 给用户添加积分
     * @param array('id'=>$member_id,'score'=>$score)
     * */
    public function addscoretomember($arr){
    	$member=new Member();
    	$member->id=$arr['id'];
    	$this->dao->get($member->id, $member);
    	$member->ownscore=$member->ownscore+$arr['score'];
    	$this->dao->update($member);
    	
    }
    
    /*
     * 获取所有用户
     * 
     * */
    public function getallmember(){
    	$result=$this->dao->getallmember();
    	return $this->success($result);
    }
    
    /*
     * 注册用户到总控
     * */
    public function registmember($username,$password){
    	if(strlen($username)<1){
    		echo json_encode(array('stute'=>false,'msg'=>'用户名为空','code'=>10001,'data'=>null));
    		exit();
    	}
    	if(strlen($password)<1){
    		echo json_encode(array('stute'=>false,'msg'=>'密码为空','code'=>10002,'data'=>null));
    		exit();
    	}
    	$url=$this->boyiuserurl."?type=register";
    	$post_data=array(
    			
    			'website'=>NETADDRESS,
    			'account'=>$username,
    			'password'=>$password
    	);
    	$jsresult=$this->send_post($url,$post_data);
    	$result=json_decode($jsresult);
  
    	if($result->register=="yes"){
    		//注册成功后的后续逻辑
    		$this->addmember(array('username'=>$username,'telephone'=>$username));//在注册时用手机号时启用这个方法
    		
    		return $this->success();
    	}else{
    		
    		return $this->fail(10003, $result->msg);
    	}
    	
    	
    }
    public function docheck($username,$password){
    	if(strlen($username)<1){
    		echo json_encode(array('stute'=>false,'msg'=>'用户名为空','code'=>10001,'data'=>null));
    		exit();
    	}
    	if(strlen($password)<1){
    		echo json_encode(array('stute'=>false,'msg'=>'密码为空','code'=>10002,'data'=>null));
    		exit();
    	}
    	$url=$this->boyiuserurl."?type=login";
    	$post_data=array(
    			 
    			'website'=>NETADDRESS,
    			'account'=>$username,
    			'password'=>$password
    	);
    	$jsresult=$this->send_post($url,$post_data);
    	$result=json_decode($jsresult);
    	if($result->login=="yes"){
    		//登录成功后的后续逻辑
    		session_start();
    		$tmresult=$this->getmemberbyname($username);
    	    
    		$_SESSION['user']=$tmresult['username'];
    		$_SESSION['member_id']=$tmresult['id'];
    	
    		return $this->success();
    	}else{
    		
    	
    		return $this->fail(10004, $result->msg);
    	}
    }
    
    
}

