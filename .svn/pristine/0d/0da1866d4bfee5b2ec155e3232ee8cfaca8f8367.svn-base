<?php
/**
 *
 * 静态页面预览控制器
 * @author Administrator
 *
 */
require_once './HtmlBase.php';

class ViewHtmlController extends Html {

    /**
     * 构造方法
     */
    public function __construct() {
        parent::__construct();
        // 如果来源为非debug(预览),则需要重新生成公共部分
		$method = $_REQUEST['method'];
		$array = array('openHtmlType','getOpenState','renameHtaccess');
        if (! isset($_REQUEST['debug']) && ! in_array($method, $array)) {
        	if( ! in_array( $this->option , $this->noMake) ) {
            	$this->makeOnce();
        	}
        }
    }

    /**
     *
     *
     * list->detail;文章预览共用功能
     * @info 只适用于首页为list，子页为detail的形式页面
     *
     * @param object $service
     *            服务层
     * @param object $tag
     *            tag对象
     * @param string $htmlDir
     *            需要生成的静态文件路径(进度条生成时有效)
     */
    private function publicDetailView($Services, $tag, $htmlDir = '') {
        // .是否为生成list还是生成detail？
        if (isset($_REQUEST['list'])) {
            $i = $_REQUEST['i'];
            $pageCount = $_REQUEST['pageCount'];
            $pageSize = $_REQUEST['pageSize'];
            // 注入生成
            $this->smarty->assign('cur', $i);
            $this->smarty->assign("pageCount", $pageCount);
            $this->smarty->assign("pageSize", $pageSize);
            $this->smarty->assign("tagOb", $tag);
            if (isset($this->config['detail_tpl'])) {
                $content = $this->tagFetch($this->config['list_tpl']);
                $listHtml = $htmlDir . 'list_' . $i . $this->htmlSuffix;
                $indexHtml = $htmlDir . 'index' . $this->htmlSuffix;
                file_put_contents($htmlDir . 'list_' . $i . $this->htmlSuffix, $content);
                if ($i == 1) {
                    copy($listHtml, $indexHtml);
                }
                die(json_encode(new Result(true, 0, '', NULL)));
            }
        } else {
            $id = (int) trim($_REQUEST['id']);
            $where = array(
                "id" => $id
            );
            $info = $Services->findOne($where, '*');
            // .注入文章id与tag标签
            $this->smarty->assign("tagOb", $tag);
            $this->smarty->assign("id", $info->id);
            // .注入SEO信息
            $title = isset($info->title) ? $info->title : '';
            $keywords = isset($info->keywords) ? $info->keywords : '';
            $description = isset($info->description) ? $info->description : '';
            if ($title == '') {
                if (isset($info->name)) {
                    $title = $info->name;
                }
                if (isset($info->subject)) {
                    $title = $info->subject;
                }
            }
            $this->assignSeoInfo($title, $keywords, $description);
            $content = $this->tagFetch($this->config['detail_tpl']);
            // .判断是否为进度条
            if (isset($_REQUEST['debug'])) {
                $detailHtml = $htmlDir . $id . $this->htmlSuffix;
                file_put_contents($detailHtml, $content);
                die(json_encode(new Result(true, 0, '', NULL)));
            } else {
                die($content);
            }
        }
    }

    /**
     * *************************************************************************************************
     */

    /**
     * 在线问答
     */
    public function ask() {
        $this->dirMake($this->option);
        $this->publicDetailView(new AskService(), new AskTag(), $this->dirMake('askDir'));
    }

    /**
     * 特色技术
     */
    public function technology() {
        $this->dirMake($this->option);
        $this->publicDetailView(new TechnologyService(), new TechnologyTag(), $this->dirMake('technologyDir'));
    }

    /**
     * 视频
     */
    public function movie() {
        $this->dirMake($this->option);
        $this->publicDetailView(new MovieService(), new MovieTag(), $this->dirMake('movieDir'));
    }

    /**
     * 成功案例
     */
    public function success() {
        $this->dirMake($this->option);
        $this->publicDetailView(new SuccessTag(), new SuccessTag(), $this->dirMake('successDir'));
    }

    /**
     * 医生
     */
    public function doctor() {
        $this->dirMake($this->option);
        $this->publicDetailView(new DoctorService(), new DoctorTag(), $this->dirMake('doctorDir'));
    }
    
    /**
     * 在线预约
     */
    public function reservation() {
        $this->dirMake($this->option);
        //在线预约详细页为单页形式
        $this->publicDetailView(new ReservationService(), new ReservationTag(), $this->dirMake('reservationDir'));
    }

    /**
     * 设备
     */
    public function device() {
        $this->dirMake($this->option);
        $this->publicDetailView(new DeviceService(), new DeviceTag(), $this->dirMake('deviceDir'));
    }

    /**
     * 医院环境
     */
    public function environment() {
        $this->dirMake($this->option);
        $this->publicDetailView(new EnvironmentService(), new EnvironmentTag(), $this->dirMake('environmentDir'));
    }

    /**
     * 荣誉预览
     */
    public function honor() {
        $this->dirMake($this->option);
        $this->publicDetailView(new HonorService(), new HonorTag(), $this->dirMake('honorDir'));
    }

    /**
     * 医院新闻预览
     */
    public function news() {
        $this->dirMake($this->option);
        $this->publicDetailView(new NewsService(), new NewsTag(), $this->dirMake('newsDir'));
    }

    /**
     * 媒体报道预览
     */
    public function mediaReport() {
        $this->dirMake($this->option);
        $this->publicDetailView(new MediaReportService(), new MediaReportTag(), $this->dirMake('mediaReportDir'));
    }

    /**
     * 生成异常
     */
    public function error() {
        $errorID = (int) trim($_REQUEST['id']);
        $errorServices = new ErrorPageService();
        $where = array(
            "id" => $errorID
        );
        $info = $errorServices->findOne($where, '*');
        $this->smarty->assign("id", $info->id);
        $content = $this->tagFetch($this->config['tpl']);
        // 判断是否为进度条
        if (isset($_REQUEST['debug'])) {
            file_put_contents($_REQUEST['html'], $content);
            die(json_encode(new Result(true, 0, '', NULL)));
        } else {
            die($content);
        }
    }

    /**
     * 生成科室首页
     */
    public function department() {
	
        $departmentID = intval($_REQUEST['id']);
		$department = new Department();
		$departmentService = new DepartmentService();
		$department->id = $departmentID;		
		 $info = $departmentService->get($department)->data;
		 if($info->pic) $info->pic = UPLOAD . $info->pic;			
            $dirDepartName = GENERATEPATH . $info->url;
            if (! is_dir($dirDepartName)) {
               @mkdir($dirDepartName, 0777 , true);
            }
			// 数据注入

			$this->smarty->assign('id', $info->id); // id
			$this->smarty->assign("method1", $info->url);
			$this->smarty->assign("department", $info);
		//注入位置导航
		$params = array();
		$params['key'] = $this->config['key'];
		$params['listname'] = $info->name;	
		$this->smarty->assign('POSITION',$this->position($params));
			 // 注入seo
			$this->assignSeoInfo($info->name, $info->keywords, $info->description);
			// 检查是否存在上传模版,如果不存在上传模版则使用默认模版
			$tplName = GENERATEPATH . $info->tplurl;
			if (! file_exists($tplName) || $info->tplurl == '') {
				$tplName = $this->config['tpl'];
				$content = $this->tagFetch2($tplName);
			} else {
				try {				//发生错误换模版继续执行
					//自定义模版
					$htplFile = TEMPDIR . $this->tag->templateName . '/' . $this->config['tpl'] . SUBFIX;
					$htpldir = dirname($htplFile);
					$tplUrl = $htpldir . '/' . basename($tplName);
					copy($tplName, $tplUrl);
					$content = $this->tagFetch2($tplUrl, true);
				}catch (Exception $e) {   
					$tplName = $this->config['tpl'];
					$content = $this->tagFetch2($tplName);  
				}
			}
			// 判断是否为进度条
			if (isset($_REQUEST['debug'])) {
				file_put_contents($_REQUEST['html'], $content);         
			} else {
				die($content);
			}
        die(json_encode(new Result(true, 0, '', NULL)));
    }

    /**
     * 生成疾病列表
     */
    public function disease() {
        $diseaseID = intval($_REQUEST['id']);
		
		$condition = array( "id" => $diseaseID);
		$sql = $this->getInfoSql($this->config['key'],$condition);
		$diseaseService = new DiseaseService();
		$info = $diseaseService->getRowTag($sql);
		if($info->pic) $info->pic = UPLOAD . $info->pic;
		if($info->parent_id != 0){
			$condition = array( "id" => $info->parent_id);
			$sql = $this->getInfoSql($this->config['key'],$condition);
			$in = $diseaseService->getRowTag($sql);
			$info->purl = $in->url;
			$info->pname = $in->name;
			unset($in);
		}		
		// 注入文章id与文章信息
		$this->smarty->assign("disease", $info);
		$this->smarty->assign("id", $info->id);
		$this->smarty->assign("disease_id", $info->id);
		$this->smarty->assign("department_id", $info->department_id);
		$this->smarty->assign("method1", $info->department_url);
		//注入位置导航
		$params = array();
		$params['id'] = $info->id;
		$params['departmentname'] = $info->department_name;
		$params['departmenturl'] = $info->department_url;	
        if($info->parent_id == 0){
			$params['key'] = $this->config['key'];
			$params['diseasename'] = $info->name;
			$params['diseaseurl'] = $info->url;			
		}else{
			$params['key'] = '';
			$params['diseasename'] = $info->name;
			$params['diseaseurl'] = $info->url;	
			$params['diseaseurl'] = $info->purl;
			$params['detailname'] = $info->pname;		
		}
			$this->smarty->assign('POSITION',$this->position($params));	
		
		// 注入SEO信息
		$title = isset($info->name) ? $info->name : $info->title;
		$keywords = isset($info->keywords) ? $info->keywords : '';
		$description = isset($info->description) ? $info->description : '';	
		$this->assignSeoInfo( $title, $keywords, $description );
		
		 $where['1'] =1;
		 $where['disease_id'] = $diseaseID;
		 $articleService = new ArticleService();
		 $articleCount = $articleService->totalRows($where)->data; 

			if($articleCount>0){
				$pageSize = $this->config['pageSize'];
				$pageCount = ceil($articleCount / $pageSize);			
			}else{
            	$pageCount = 1;
				$pageSize = $this->config['pageSize'];
			}
            if($info->parent_id == 0){
				$dir =  $info->department_url . '/' . $info->url;
			}else{
				$dir =  $info->department_url . '/' . $info->purl. '/'. $info->url;							
			}
			$htmlDir = ABSPATH . '/' . $dir . '/';
			if (! is_dir( $htmlDir )) {
				$this->createdir($htmlDir);
			}

			$indexHtmlUrl = $htmlDir . 'index' . $this->htmlSuffix; // 疾病目录下首页html路径

		   for ($i = 1; $i <= $pageCount; $i ++) {
				$listHtmlUrl = $htmlDir . 'list_' . $i . '' . $this->htmlSuffix; // 疾病目录下列表页html路径
				//注入分页
				$this->setPageHtml($i,$pageSize,$articleCount,$dir);
				// 检查是否存在上传模版,如果不存在上传模版则使用默认模版
				$tplName = GENERATEPATH . $info->tplurl;
				if (! file_exists($tplName) || $info->tplurl == '') {
					$tplName = $this->config['tpl'];
					$content = $this->tagFetch($tplName);
				} else {
					$tplName = GENERATEPATH . $info->tplurl;
					$content = $this->tagFetch($tplName, true);
				}

				// 判断是否为进度条
				if (isset($_REQUEST['debug'])) {
					file_put_contents($listHtmlUrl, $content);
					if ($i == 1) {
						@copy($htmlDir. 'list_1' . $this->htmlSuffix, $indexHtmlUrl);
					}
				} else {
					die($content);
				}
			}
        die(json_encode(new Result(true, 0, '', NULL)));
    }

    /**
     * 资讯预览
     * @info get或者post传入资讯文章id
     */
    public function article() {
        //$this->publicData();
        // 获取文章id
        $articleID   = (int) trim($_REQUEST['id']);
        
/*         if (isset($_REQUEST['debug'])){
            $artcleHtml = trim($_REQUEST['html']);
            $make_article_id = trim($_REQUEST['makeArticleId']);
            $make_article_id = explode(',', $make_article_id);
            if (!empty($make_article_id)) {
                 if (in_array($articleID, $make_article_id)) {
                 	//生成过，则查看文件是否还在
                     if (file_exists($artcleHtml)) {
                         die(json_encode(new Result(true, 0, '', NULL)));
                     }
                 }
            }
        } */
        $articleservice = new ArticleService();
		$where = array( "id" => $articleID );
		$articleInfo = $articleservice->findOne($where, '*');  //获取文章
        $diseaseInfo  = array();						// 疾病信息
		$departmentInfo = array();						// 科室信息
        $isnotDisease = true;
        // 如果文章有疾病id,则获取疾病信息
		$this->diseaseArray = array();
		$this->departmentArray = array();
		$diseaseDAO    = new DiseaseDAO();
	    $this->diseaseArray    = $diseaseDAO->getInfo('');
		
	    $departmentService = new DepartmentService();
	    $this->departmentArray = $departmentService->getListAll()->data;
        if ((int) $articleInfo->disease_id != 0) {
            foreach ($this->diseaseArray as $key => $value) {
                if ($value['id'] == $articleInfo->disease_id) {
                    $diseaseInfo = $value;
                    break;
                }
            }
            $diseaseInfo = (array) $diseaseInfo;
            $isnotDisease = false;
        }
        if ((int) $articleInfo->department_id != 0) {
            foreach ($this->departmentArray as $key => $value) {
                if ($value->id == $articleInfo->department_id) {
                    $departmentInfo = $value;
                    break;
                }
            }
            $departmentInfo = (object) $departmentInfo;
        }		

		 // 数据注入
        $this->smarty->assign('id', $articleInfo->id); // 文章id
        $this->smarty->assign('department', $departmentInfo); // 科室信息
        $this->smarty->assign('disease', $diseaseInfo); // 疾病信息
        $this->smarty->assign('detail', (array) $articleInfo); // 文章信息
        $this->assignSeoInfo($articleInfo->title, $articleInfo->keywords, $articleInfo->description); // seo信息
        // 如果没有疾病,则调取没有疾病的模版
        if ($isnotDisease) {
            $content = $this->tagFetch($this->config['depart_tpl']);
        } else {
            $content = $this->tagFetch($this->config['tpl']);
        }
        // 判断是否为进度条
        if (isset($_REQUEST['debug'])) {
            $artcleHtml = trim($_REQUEST['html']);
            file_put_contents($artcleHtml, $content);
            // 记录生成位置,以便后续进行断点生成的工作
	        $_SESSION['article_count']  = $_SESSION['article_count'] - 1;
	        $_SESSION['article_id']     = $_REQUEST['id'];
            die(json_encode(new Result(true, 0, '', NULL)));
        } else {
            die($content);
        }
    }
    
    /**
     * 生成自定义频道列表...
     */
    public function channel() {
        $arr = $this->channelData();
        $channelId = (int) $_REQUEST['id'];
        $obj = new ChannelArticleTag();
        foreach ($this->channels as $key => $value) {
           /*  $seoServices = new SeoService();
            $where = array(
                "flag" => $value->shortname
            ); 
            $seoInfo = $seoServices->findOne($where, '*'); */
            
            if (isset($value->id)) {
                $this->smarty->assign("SEO_TITLE", $value->title);
                $this->smarty->assign("SEO_KEYWORDS", $value->keywords);
                $this->smarty->assign("SEO_DESCRIPTION", $value->description);
            }           
            
            
            if ($channelId == $value->id) {
            	// 文章是否存在判断
            	if( isset( $this->channelarticleArray[$value->id] ) && count($this->channelarticleArray[$value->id]) >= 1 ){
	            	// 该频道下的文章总数
	            	$count = count($this->channelarticleArray[$value->id]);
	            	// 获取总页数
	            	$pageCount = ceil($count / $this->config['pageSize']);
	            	// 频道下的首页html路径
	            	$indexUrl = GENERATEPATH . $value->shortname . '/index' . $this->htmlSuffix;
	            	for ($i = 1; $i <= $pageCount; $i ++) {
	            		$listUrl = GENERATEPATH . $value->shortname . '/list_' . $i . $this->htmlSuffix;
	            		$this->smarty->assign('id', $value->id);
	            		$this->smarty->assign('cur', $i); // 循环id(分页cur)
	            		$this->smarty->assign('tagOb', $obj);
	            		$this->smarty->assign('dir', $value->shortname);
	            		// 是否为自定义模版
	            		if( trim( $_REQUEST['html'] ) != '' ){
	            			$tplName = $_REQUEST['html'];
	            			$content = $this->tagFetch($tplName,true);
	            		}else{
	            			$tplName = $this->config['tpl'];
	            			$content = $this->tagFetch($tplName);
	            		}
	            		if (isset($_REQUEST['debug'])) {
	            			file_put_contents($listUrl, $content);
	            			if ($i == 1) {
	            				copy(GENERATEPATH . $value->shortname . '/list_1' . $this->htmlSuffix, $indexUrl);
	            			}
	            		} else {
	            			die($content);
	            		}
	            	}
            	}else{
            		// 注入相关参数
            		$this->smarty->assign('tagOb', $obj);
            		$this->smarty->assign('id', $value->id);
            		$this->smarty->assign('cur', 1);
            		$this->smarty->assign('dir', '');
            		// 频道下的首页html路径
            		$indexUrl = GENERATEPATH . $value->shortname . '/index' . $this->htmlSuffix;
            		// 是否为自定义模版
            		if( isset( $_REQUEST['html'] ) && trim( $_REQUEST['html'] ) != '' ){
            			$tplName = $_REQUEST['html'];
            			$content = $this->tagFetch($tplName,true);
            		}else{
            			$tplName = $this->config['tpl'];
            			$content = $this->tagFetch($tplName);
            		}
            		// 是否进行输出操作
            		isset($_REQUEST['debug']) ? file_put_contents($indexUrl, $content) : die($content);
            	}
            	// 输出执行
            	die(json_encode(new Result(true, 0, '', NULL)));
            }
        }
    }

    /**
     * 生成自定义频道文章...
     */
    public function channelArticle() {
        $arr = $this->channelData();
        $id = $_REQUEST['id'];
        $obj = new ChannelArticleService();
        $channelArticle = $obj->query(array(
            'id' => $id
        ))->data;
        $channelArticle = $channelArticle[0];
        $this->smarty->assign('id', $id);
        foreach ($this->channels as $value) {
            if ($value->id == $channelArticle->channel_id) {
            	$debugHtml    = $value->is_use_tpl;
            	$debugHtmlTpl = $value->detailtplurl;
                $this->smarty->assign('dir', $value->shortname);
            }
        }
        $this->assignSeoInfo($channelArticle->title, $channelArticle->keywords, $channelArticle->description);
        
        if (isset($_REQUEST['debug'])) {
			$html = explode("|", trim( $_REQUEST['html'] ));
        }else{
        	$html    = array();
			if( $debugHtml == 0 ){
				$html[0] = GENERATEPATH . $debugHtmlTpl;
			}else{
				$html[0] = '';
			}
        	$html[1] = '';
        }
        
        if( $html[0] != '' ){
        	if(substr($html[0],-4) != 'htpl'){
        		$content = '';
        	}else{
        		$tplName = $html[0];
        		$content = $this->tagFetch($tplName,true);
        	}
        }else{
        	$tplName = $this->config['tpl'];
        	$content = $this->tagFetch($this->config['tpl']);
        }
        
        if (isset($_REQUEST['debug'])) {
            $artcleHtml = $html[1];
            file_put_contents($artcleHtml, $content);
            die(json_encode(new Result(true, 0, '', NULL)));
        } else {
            die($content);
        }
    }
    
    /**
     * 专题生成
     */
    public function topic() {
    	$topicID = (int)$_REQUEST['id'];
    	$topService = new TopicService();
    	$topicHtpl  = $topService->gethtml( $topicID );
    	require_once GENERATEPATH . 'lib/io.php';
    	if( $topicHtpl != '' ){
    		$relvaPath =  basename( $topicHtpl );
    		//生成
    		$html = explode("|",$_REQUEST['html']);
    		//查找数据
    		$_REQUEST['id'] = $topicID;
			$info = $topService->getOne(array(),'*');
			if( $info->id == $topicID ){
				$this->assignSeoInfo($info->title, $info->keywords, $info->description);
			}
    		//注入样式路径
    		$this->smarty->assign('TOPIC_STYLE',NETADDRESS . '/topic/' . $html[0] . '/');
    		$content = $this->tagFetch( GENERATEPATH . 'topic/' . $html[0] . '/' . $relvaPath , true );
    		if (isset($_REQUEST['debug'])) {
    			file_put_contents( GENERATEPATH . 'topic/' . $html[0] . '/' . $html[1] , $content);
    		}else{
    			die($content);
    		}
    	}
    	die(json_encode(new Result(true, 0, '', NULL)));
    }
    /*验证文件夹是否存在
     * @param $path 文件夹地址
     * return 0表示文件夹已经存在,1表示创建成功，2表示创建失败
     * **/
   private function createdir($path){
        if (file_exists($path)){			//判断目录存在否，存在不创建
            return 0;
        }else{ 							//不存在创建
            $re=mkdir($path,0755,true); //第三个参数为true即可以创建多极目录
            if ($re){
                chmod($path,0755);
                return 1;
            }else{
                return 2;
            }
        }
    }
	/**
	 * 
	 * 根据分页信息获取分页html
	 * @param int $current 当前页
	 * @param int $pageSize 每页条数
	 * @param int $count 总条数
	 * @param string $dir html存放文件夹
	 * @param string $pageHtml 分页模版文件(默认采取index模版分页模式)
	 */
	public function setPageHtml($current,$pageSize,$count,$dir = '',$pageHtml = 'index') {
		#.分页导航允许条数
		$pageMaxNav = 7;
		#.总页数
		$pageCount = ceil($count / $pageSize);
		#.上一页
		$pre     = $current > 1 ? ($current-1) : 1;
		#.下一页
		$next    = ( $current + 1 < $pageCount ) ? ($current+1) : $pageCount;
		#.计算开始&结束页码
		if( $pageCount <= $pageMaxNav ){
			$start = 1;$end   = $pageCount;
		}else{
			#.计算开始
			if( $current <= 4 ){
				$start = 1;$end   = $pageMaxNav;
			}else{
				$start = $current - 3;$end   = $current + 3;
				if( $end >= $pageCount ) {
					$start = $pageCount - $pageMaxNav + 1;$end   = $pageCount+1;	
				}
			}
		}
		#.注入数据并返回解析后的html
		$this->smarty->assign ( 'count', $count );          //总条数
		$this->smarty->assign ( 'pageCount', $pageCount ); //总页数
		$this->smarty->assign ( 'current', $current );    //当前页码
        $this->smarty->assign ( 'pageSize', $pageSize);  //每页条数
		$this->smarty->assign ( 'pre', $pre );			//上一页
		$this->smarty->assign ( 'next', $next );		//下一页
		$this->smarty->assign ( 'end', $end );			
		$this->smarty->assign ( 'start', $start );
		$this->smarty->assign ( 'dir' , $dir );  		//存放文件夹
		if($pageCount ==1){ return; }
	}
   /**
     * sql信息 tabs
     * @dep 关联department
     * @dis 关联disease
	 * @cha 关联channel
	 * @as  缩简表
     */
    public function getInfoSql($flag,$params)
    {
		 $tabs = array(
			'introduce'=> array('as'=>'i'),
			'news'  => array('as'=>'new'),
			'article'=>array('as'=>'art','dep'=>1,'dis'=>1),
			'doctor'  => array('as'=>'doc','dep'=>1),
			'topic'  => array('as'=>'top'),
			'success'  => array('as'=>'suc','dep'=>1),
			'technology'  => array('as'=>'tec','dep'=>1),
			'channelarticle'  => array('as'=>'chan','cha'=>1),
			'channel'  => array('as'=>'cha','chan'=>1),
			'ask'  => array('as'=>'ask','dep'=>1),
			'honor'  => array('as'=>'hon'),
			'environment'=>array('as'=>'env'),
			'device'=>array('as'=>'dev'),
			'movie'=>array('as'=>'mov'),
			'mediareport'=>array('as'=>'med'),
			'department'=>array('as'=>'dep'),
			'disease'=>array('as'=>'dis','dep'=>1),
		);
		$tab = $tabs[$flag];
		$as = $tab['as'];
			
		if($params['id'] || $params['ids']){
			if($params['ids']){
			  $select = 'SELECT '.$as.'.id,'.$as.'.subject';		
			}else{
			  $select = 'SELECT '.$as.'.*';				
			}
		}
		$join = '';
		if(isset($tab['cha']) && $tab['cha']==1){
			$cha = new ChannelTag();
			$field_cha = $cha->getChaFields();
			$select .= ','.$field_cha;
			$join .=' LEFT JOIN `channel` as cha ON chan.channel_id = cha.id ';
		}
		if(isset($tab['chan']) && $tab['chan']==1){
		  $cha = new ChannelArticleTag();
		  $field_cha = $cha->getChanFields();
		  $select .= ','.$field_cha;
		  $join .=' LEFT JOIN `channelarticle` as chan ON chan.channel_id = cha.id ';
		}
		$where = ' WHERE 1=1';
		if(isset($tab['dep']) && $tab['dep']==1){
			$join .= ' LEFT JOIN `department` AS dep ON dep.id = '.$as.'.department_id ';
			$select .= ',dep.name AS department_name,dep.url AS department_url';		
		}
		if(isset($tab['dis']) && $tab['dis']==1){
			$join .= ' LEFT JOIN `disease` AS dis ON dis.id = '.$as.'.disease_id ';	
			$select .= ',dis.name AS disease_name,dis.url AS disease_url';
		}
		if($params['id'])
		{
			$where .= ' AND '.$as.'.id='.$params['id'];
		}
		if($params['ids'])
		{
			$where .= ' AND '.$as.'.id IN('.$params['ids'].')';
		}
		$select .= ' FROM `'.$flag.'` AS '.$as.' ';
		if($params['id']){
			$where .=' LIMIT 1';
		}
	
		return $select.$join.$where; 
			
	}
	//位置导航 
    public function position($params)
    {
		$website = NETADDRESS;
		$key = isset($params['key']) ? $params['key'] : '';
		$id = isset($params['id']) ? intval($params['id']) : '';
		$departmentname = $params['departmentname'] ? $params['departmentname'] : '';
		$diseasename = $params['diseasename'] ? $params['diseasename'] : '';
		$departmenturl = $params['departmenturl'] ? $website . '/' . $params['departmenturl'] . '/' : '';
		$diseaseurl = $params['diseaseurl'] ? $departmenturl . $params['diseaseurl'] . '/' : '';
		$detailname = $params['detailname'] ? $params['detailname'] : '';
		$listurl = $params['listurl'] ? $website . '/' . $params['listurl'] . '/' : '';
		$listname = $params['listname'] ? $params['listname'] : '';
		switch($key){
			case 'disease' : $sign = 1; break;
			case 'article' : $sign = 2; break;
			default : $sign = 3; break;
		}

		$str = '';
		if($sign == 3){
			if(empty($id)){
				$str = '<ol class="breadcrumb">您的位置：<li><a href="'.$website.'"><i class="icon icon-home"></i> 首页</a></li><li>'.$listname.'</li></ol>';
			}else{
				$str = '<ol class="breadcrumb">您的位置：<li><a href="'.$website.'"><i class="icon icon-home"></i> 首页</a></li><li><a href="'.$listurl.'">'.$listname.'</a></li><li class="active">'.$detailname.'</li></ol>';				
			}
		}elseif($sign == 1){
				$str = '<ol class="breadcrumb">您的位置：<li><a href="'.$website.'"><i class="icon icon-home"></i> 首页</a></li><li><a href="'.$departmenturl.'">'.$departmentname.'</a></li><li class="active">'.$diseasename.'</li></ol>';
		}elseif($sign == 2){
				$str = '<ol class="breadcrumb">您的位置：<li><a href="'.$website.'"><i class="icon icon-home"></i> 首页</a></li><li><a href="'.$departmenturl.'">'.$departmentname.'</a></li><li><a href="'.$diseaseurl.'">'.$diseasename.'</a></li><li class="active">'.$detailname.'</li></ol>';
		}
		return $str;
	}
     /**
     * 开启网站状态(手动/自动/动态)
     */
    public function openHtmlType() {
		$typename = $_POST['typename'];
		switch($typename){
			case 'manualupdate' : $i=0; $num1=185;$num2=186; break;
			case 'autoupdate' :   $i=1; $num1=187;$num2=188; break;
			case 'dynamic' :      $i=2; $num1=189;$num2=190; break;
			default: break;
		}
        $configFile = ABSPATH . '/config.json';
        if (file_exists($configFile)) {
			$res = $this->renameHtaccess($i);
			if(!$res){
				$result = new Result(false, 191, ErrorMsgs::get(191), NULL);
				echo json_encode($result);exit;				
			}
            $content = file_get_contents($configFile);
            $config = json_decode($content);
            if (isset($config->openType) && ($config->openType != $typename)) {
                $config->openType = $typename;
                $data = json_encode($config);
                file_put_contents($configFile, $data);
                $result = new Result(true, $num1, ErrorMsgs::get($num1), $i);
            } else {
                $data = array("hccDir"=>$config->hccDir,"openLog"=>$config->openLog,"openType"=>$typename,"mtime"=>time());
                $data = json_encode($data);
                file_put_contents($configFile, $data);
                $result = new Result(true, $num1, ErrorMsgs::get($num1), $i);
            }
        } else {
            $result = new Result(false, 191, ErrorMsgs::get(191), NULL);
        }

        echo json_encode($result);
    }
     /**
     * 判断服务器使用apache还是nginx的方法 
     */	
    public function getServerSoftware() {
		$software = '';
		switch (PHP_SAPI) {
			case 'cgi-fcgi':    // 使用nginx + php-fpm  
			case 'fpm-fcgi':  $software='nginx';break;  // 使用nginx + fastcgi 
			case 'apache2handler': //使用apache
			case 'cgi':    //直接使用终端的php命令解析
			default : $software='apache'; break;
		}
		return $software;
	}	
     /**
     * 获得开启状态
     */
    public function getOpenState() {
		$typename = $_POST['typename'];
		$i = $_POST['i'];
        $configFile = ABSPATH . '/config.json';
        if (file_exists($configFile)) {	
            $content = file_get_contents($configFile);
            $config = json_decode($content);
			$result['statu'] = ( $config->openType == $typename ) ?  true : false;
			$result['msg'] = $typename;
			$result['data'] = $i;
			//$result = new Result(( $config->openType == $typename ) ?  true : false, '', $typename, $i);						
		} else {
			$result['statu'] = false;
			$result['msg'] = $typename;
			$result['data'] = $i;
            //$result = new Result( false, $typename,  $i );
        }
        echo json_encode($result);		
	}
     /**
     * 处理.htaccess文件
     */
	public function renameHtaccess($i){
		$hturl1 = ABSPATH.'/data/apache_rewrite.conf';   //apache
		$hturl2 = ABSPATH.'/data/nginx_rewrite.conf';	 //nginx
		$software = $this->getServerSoftware();
		if($i==0){						
			if($software=='apache' && file_exists(ABSPATH.'/.htaccess')){
				@unlink(ABSPATH.'/.htaccess');
				@unlink($hturl1);
			}
			if($software=='nginx' && file_exists(ABSPATH.'/n_rewrite.conf')){
				file_put_contents(ABSPATH.'/n_rewrite.conf','');
				@unlink($hturl2);				
			}			
		}else{
			if($software=='apache'){
				$this->apacheRewrite();
				@copy($hturl1,ABSPATH.'/.htaccess');
			}
			if($software=='nginx'){
				$this->nginxRewrite();
				@copy($hturl2,ABSPATH.'/n_rewrite.conf');			
			}			
		}
		return true;	
	}

     /**
     * 初始化rewrite
     */	
	public function nginxRewrite(){
		$str ='# nginx rewrite  rule
	rewrite ^/hcc\/$ /hcc/login.html last;
	rewrite ^/(mobile|app|wechat)\/$ /$1/index.php last;
if ($uri ~ "/hcc/"){
	set $rule_0 1$rule_0;
}
if ($rule_0 = "1"){
	rewrite /(.*) /$1 last;
}
	rewrite ^/(|index\.html)$ /controller/?controller=AutoMakeHtml&method=index last;
	rewrite ^/contact\.html$ /controller/?controller=AutoMakeHtml&method=contact last;
	rewrite ^/reservation\.html$ /controller/?controller=AutoMakeHtml&method=reservation last;
	rewrite ^/hospital\/introduce\.html$ /controller/?controller=AutoMakeHtml&method=introduce last;
	rewrite ^/topic\/([a-zA-Z_]+)\/([a-zA-Z]+)\.html$ /controller/?controller=AutoMakeHtml&method=topic&type=$1&type1=$2 last;
	rewrite ^/search\.html?(.*)$ /controller/?controller=AutoMakeHtml&method=search last;
	rewrite ^/([a-zA-Z]+)\/(|index|list_\d+|\d+)(|\.html)$ /controller/?controller=AutoMakeHtml&method=control&type=$1&id=$2 last;
	rewrite ^/([a-zA-Z]+)\/([a-z]+)\/(|index|list_\d+|\d+)(|\.html)$ /controller/?controller=AutoMakeHtml&method=method&type=$1&type1=$2&id=$3 last;
# end nginx rewrite rule';
		file_put_contents(ABSPATH.'/data/nginx_rewrite.conf',$str);	
	}
	public function apacheRewrite(){
		$str ='Options -Indexes
<IfModule rewrite_module>
RewriteEngine On
RewriteCond %{REQUEST_URI} "/hcc/"
RewriteRule (.*) $1 [L]
RewriteRule ^(|index\.html)$ /controller/?controller=AutoMakeHtml&method=index [NC]
RewriteRule ^contact\.html$  /controller/?controller=AutoMakeHtml&method=contact [NC]
RewriteRule ^reservation\.html$  /controller/?controller=AutoMakeHtml&method=reservation [NC]
RewriteRule ^hospital\/introduce\.html$  /controller/?controller=AutoMakeHtml&method=introduce [NC]
RewriteRule ^topic\/([a-zA-Z_]+)\/([a-zA-Z]+)\.html$  /controller/?controller=AutoMakeHtml&method=topic&type=$1&type1=$2 [NC]
RewriteRule ^search\.html?(.*)$ /controller/?controller=AutoMakeHtml&method=search [NC]
RewriteRule ^hcc\/$   /hcc\/login.html [NC]
RewriteRule ^(mobile|app|wechat)\/$   /$1\/index.php [L]
RewriteRule ^([a-zA-Z]+)\/(|index|list_\d+|\d+)\.html$  /controller/?controller=AutoMakeHtml&method=control&type=$1&id=$2 [NC]
RewriteRule ^([a-zA-Z]+)\/([a-z]+)\/(|index|list_\d+|\d+)(|\.html)$  /controller/?controller=AutoMakeHtml&method=method&type=$1&type1=$2&id=$3 [NC]
</IfModule>';
		file_put_contents(ABSPATH.'/data/apache_rewrite.conf',$str);	
	}
}