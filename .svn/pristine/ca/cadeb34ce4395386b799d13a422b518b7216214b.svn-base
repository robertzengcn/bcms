<?php

/**
 * 资讯(news)DAO
 *
 * @author Administrator
 *
 */
class MemberDAO extends DBBaseDAO {

    public function __construct() {
        parent::__construct();
        $this->tableName = TABLENAME_MEMBER;
    }

    /**
     * 获得grid数据
     *
     * @param array $where
     *            查询条件
     *            return object $arr
     */
    public function query($where) {
    	//DTExpression::like('name', $where, $this->tableName);
        DTEXPRESSION::like('username', $where,'m');
        DTExpression::ge('last_log', $where, 'start_time','ml');
        DTExpression::le('last_log', $where, 'end_time','ml');

        if (isset($where['order']) &&  $where['order']) {
            DTOrder::$sql = $where['order'];
        }
        
        $sql=ORMMap::$sqlMap['memberdetail']. ' where '.DTEXPRESSION::$sql . DTOrder::$sql . DTExpression::$limit;
// print_r($sql);
// print_r($where);


      return $this->getjoin($sql);
    }
    
    
    

    /**
     * 获得总数
     *
     * @param array $where
     *            查询条件
     *            return object $arr
     */
    public function totalRows($where) {
        DTEXPRESSION::like('username', $where,'m');
        DTExpression::ge('last_log', $where, 'start_time','ml');
        DTExpression::le('last_log', $where, 'end_time','ml');
        $sql=ORMMap::$sqlMap['memberdetailcount']. ' where '.DTEXPRESSION::$sql . DTOrder::$sql . DTExpression::$limit;
        return $this->getjoin($sql);
       
//         DTExpression::eq('isbidding', $where);
//         DTExpression::like('subject', $where);
        //DTExpression::eq('shelf', $where);
        //DTExpression::eq('pattern', $where);

        //return $this->getRecordCount(DTExpression::$sql, DTExpression::$params);
    }
    
    /*
     * 根据type取值
     * @param $arr
     * */
    public function getbytype($arr){
    	$result=R::find($this->tableName,'type=:type',$arr);
    	R::close();
    	return $result;
    	
    }
    
    /*
     * 检查数据是否存在
     * */
    public function getdate(){
    	$member = R::findAll($this->tableName);
    	
    	$memberArray = array();
    	foreach ($member as $key => $value) {
    		$member = new Member();
    		$member->generateFromRedBean($value);
    		$memberArray[] = $member;
    	}
    	R::close();
    	
    	return $memberArray;
    }
    
    /*
     *清空所有数据 
     * */
    
    public function delall(){
    	$member = R::findAll($this->tableName);
    	$result=R::trashAll($member);
    	R::close();
    	return $result;
    }
    
    /*
     * 通过用户名获取用户数据
     * */
    public function getmemberbyname($arr){
    	
    	$member = R::findOne($this->tableName,'username=:username',$arr);
    	R::close();
    	
    	
     	$memberArray = array();
    	foreach ($member as $key => $value) {
    		$memberArray[$key]=$value;
    	}
    	R::close();
    	return $memberArray;
    }
    
    public function getscoreamount($arr){
    	$member = R::findOne($this->tableName,'id=:id',$arr);
    	R::close();
    	$memberArray = array();
    	foreach ($member as $key => $value) {
    		$memberArray[$key]=$value;
    	}
    	
    	return $memberArray;
    	
    }
    /*
     * 减去某个会员的积分
     * @param $arr['id'], $arr['score'] 
     * 
     * */
    public function reducescore($arr){
    	$memarr=array('id'=>$arr['id']);
    	R::exec('LOCK TABLES '.$this->tableName.' WRITE');
    	$member = R::findOne($this->tableName,'id=:id',$memarr);    	   	
        $member->ownscore=$member->ownscore-$arr['score'];
        R::store($member);
        R::exec('UNLOCK TABLES');
        R::close();
    	
    }
    
    
    
    

    
}

