<?php

class WuxianService extends BaseService {

	/**
	 * 发送短信的接口地址
	 * */
	private $__url = null;
	
	/**
	 * 接口账号
	 * */
	private $__cid = null;
	
	/**
	 * 接口密码
	 * */
	private $__pwd = null;
	
	
	


    /**
     * 构造函数
     */
    public function __construct($url, $cid, $pwd) {
        parent::__construct();
        $this->__url = 'http://'.$url;
        $this->__cid = $cid;
        $this->__pwd = $pwd;

    }
    
    /**
     * 发送验证码
     *
     * @param string $mobile 手机号
     * */
    public function sendAuthCode($mobile) {
    	if (empty($mobile)) {
    		throw new ValidatorException(56);
    		return false;
    	}
    
    	$code = rand(100000, 999999);
    	$content = '您的验证码【' . $code . '】，请尽快完成验证';
    	$sign=$this->getsign($content);
    	$params = $this->formatParams($mobile, $content,$sign);
    	$result = $this->send($params);
    	
    	if(strstr($result, 'SUCCESS')){
    		 
    		$this->intoSession($code);
    
    		return $code;
    	}
    	return false;
    }
    
    // }}}
    // {{{ public function sendNormalMessage()
    
    /**
     * 发送普通消息
     *
     * @param string $mobile 手机号
     * @param string $content 发送内容
     * */
    public function sendNormalMessage($mobile, $content) {
    	
    	if (empty($mobile)) {
    		throw new ValidatorException(56);
    		return false;
    	}
    	 
    	if (empty($content)) {
    		throw new ValidatorException(112);
    		return false;
    	}
    	$sign=$this->getsign($content);
    	
    	
    	$params = $this->formatParams($mobile, $content,$sign);
    	$result=$this->send($params);
    	
    	
    	if(strstr($result, 'SUCCESS')){
    		 
    		return $this->success();
    	}else{
    		$error_log = GENERATEPATH . 'log/wuxian_error.log';
    		
    		error_log(date('Y-m-d H:i:s') . ' send message error:' . urldecode($result) . PHP_EOL, 3, $error_log);
    		return $this->fail(11,'短信发送失败');
    	}
    	
    	
    }
    
    // }}}
    // {{{ public function send()
    
    /**
     * @param string $params  发送的参数
     * */
    public function send($params) {    	    	
    	$ch = curl_init();
    	curl_setopt($ch, CURLOPT_URL, $this->__url);
    	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    	curl_setopt($ch, CURLOPT_POST, 1);
    	curl_setopt($ch, CURLOPT_POSTFIELDS, $params);
    	$return = curl_exec($ch);
    	
    	curl_close($ch);
    	
    	if ($return === false) {
    		return false;
    	}
    	return $return;
    }
    
    // }}}
    // {{{ protected function intoCookie()
    
    /**
     * 将验证码写入cookie
     * */
    protected function intoCookie($code) {
    	if (isset($_COOKIE['MOBILE_AUTH_CODE'])) {
    		unset($_COOKIE['MOBILE_AUTH_CODE']);
    	}
    	 
    	//$_COOKIE['MOBILE_AUTH_CODE'] = $code;
    	//有效期为1分钟
    	setcookie('MOBILE_AUTH_CODE', md5($code), time()+60*5, '/');
    }
    
    /**
     * 将验证码写入session
     * */
    protected function intoSession($code) {
    	session_start();
    	if (isset($_SESSION['MOBILE_AUTH_CODE'])) {
    		unset($_SESSION['MOBILE_AUTH_CODE']);
    	}
    $_SESSION['MOBILE_AUTH_CODE']=md5($code);
    	//$_COOKIE['MOBILE_AUTH_CODE'] = $code;
    	//有效期为1分钟
    	//setcookie('MOBILE_AUTH_CODE', md5($code), time()+60*5, '/');
    }
    
    // }}}
    // {{{ protected function formatParams()
    
    /**
     * 格式化提交参数
     * */
    protected function formatParams($mobile, $content,$sign) {
    	$params = 'cust_code=' . $this->__cid;
    	$params .= '&content=' . urlencode($content);
    	$params .= '&destMobiles=' . $mobile;
    	$params .= '&sign=' . $sign;
    
    	return $params;
    }
    // }}}
    // }}}
    
    /*
     * 生成sign秘钥
     * */
    protected function getsign($content){
    	return md5(urlencode($content).$this->__pwd);
    }
    /*
     * 获取token
     * */
    protected function gettoken(){
    	$params = 'action=GetToken&cust_code='.$this->__cid;
    	
    	$ch = curl_init();
    	
    	curl_setopt($ch, CURLOPT_URL, $this->__url);
    	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    	curl_setopt($ch, CURLOPT_POST, 1);
    	curl_setopt($ch, CURLOPT_POSTFIELDS, $params);
    	$return = curl_exec($ch);    	 
    	curl_close($ch);
    	
    	if ($return === false) {
    		return false;
    	}
    	return $return;
    	
    }
    
    protected function sendpost($params){
    	$ch = curl_init();
    	 
    	curl_setopt($ch, CURLOPT_URL, $this->__url);
    	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    	curl_setopt($ch, CURLOPT_POST, 1);
    	curl_setopt($ch, CURLOPT_POSTFIELDS, $params);
    	$return = curl_exec($ch);
    	curl_close($ch);
    	 
    	if ($return === false) {
    		return false;
    	}
    	return $return;
    }
    /*
     * 查询账户余额
     * */
    public function checkbalance(){
    	
    	$tokenarr=$this->gettoken();
    	$token = explode ( ',', $tokenarr );
    	$tokenidarr=explode ( ':',$token[0]);
    	$tokenarr=explode ( ':',$token[1]);
    	
    	$sign=md5($tokenarr[1].$this->__pwd);
    	
    	$params = 'action=QueryAccount&cust_code='.$this->__cid.'&token_id='.$tokenidarr[1].'&sign='.$sign;
    	
    	$result=$this->sendpost($params);
    	
    	if(!strstr($result, 'ERROR')){
    		$resultarr=explode ( ',',$result);
    		$balance=explode ( ':',$resultarr[2]);
    		return $this->success($balance);
    		
    	}else{
    		return $this->fail(11,urldecode($result));
    	}
    	
    	
    }
    
 
}
