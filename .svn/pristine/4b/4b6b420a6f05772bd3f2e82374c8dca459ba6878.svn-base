<?php

class ReserTemplateService extends BaseService {

    public function __construct() {
        $this->dao = new ReserTemplateDAO();
    }

    /**
     * 添加或编辑 .
     * ..
     */
    public function save($reservation) {
        $reservation->validate();
        $reservation->plushtime = time();
        
        
     
        
       $nums=$this->dao->save($reservation);
       
        
       return $this->success($nums);
       
        
    }
    
   public function update_montime($tem_id,$time){
   	$array=array('id'=>$tem_id);
   	$this->dao->update_montime($array,$time);
   }
    
   public function update_afttime($tem_id,$time){
   	$array=array('id'=>$tem_id);
   	$this->dao->update_afttime($array,$time);
   }
   
   public function update_nigtime($tem_id,$time){
   	$array=array('id'=>$tem_id);
   	$this->dao->update_nigtime($array,$time);
   }
   
   
   
    
    /*
     * 检查数据是否存在
     * 
     * 
     * */
    public function check_exist($reservation){
    	$array=array('department_id'=>$reservation->department_id,
    	               'title'=>$reservation->title,
    			      'type'=>$reservation->type
    	);
    	
    	return $this->dao->check_exist($array);
    }
    
    

    /**
     * 查询指定的数据量...
     *
     * @param array $where
     * @return Result
     */
    public function query($where) {
  
        $departmentS = new DepartmentManagerService();
        $department = new DepartmentManager();
        $doctorS = new DoctorManagerService();
        $doctor = new DoctorManager();

  
        $reservations = $this->dao->query($where);
   

        $reser=array();
        foreach ($reservations as $k => $v) {
        	$reser[$k]['id']=$v->id;
        	$reser[$k]['title']=$v->title;
        	$reser[$k]['department']=$v->department;
        	$reser[$k]['plushtime']=date("Y-m-d H:i:s", $v->plushtime);
        }

        return $this->success($reser);
    }

    
    public function queryTag($where) {
        $departmentS = new DepartmentService();
        $department = new Department();
        $doctorS = new DoctorService();
        $doctor = new Doctor();
        $reservations = $this->dao->query($where);
        foreach ($reservations as $k => $v) {
            $v->date = date('Y-m-d', $v->date);
            $department->id = $v->department_id;
            $departmentContent = $departmentS->get($department);
            $doctor->id = $v->doctor_id;
            $doctorContent = $doctorS->get($doctor);
            $v->department = $departmentContent->data->name;
            $v->doctor = $doctorContent->data->name;
            if ($v->morning) {
                $morning = explode('-', $v->morning);
                $num1 = strtotime($v->date . ' ' . $morning[1]) - strtotime($v->date . ' ' . $morning[0]);
            }
            if ($v->afternoon) {
                $afternoo = explode('-', $v->afternoon);
                $num2 = strtotime($v->date . ' ' . $afternoo[1]) - strtotime($v->date . ' ' . $afternoo[0]);
            }
            if ($v->night) {
                $night = explode('-', $v->night);
                $num3 = strtotime($v->date . ' ' . $night[1]) - strtotime($v->date . ' ' . $night[0]);
            }
    
            // 计算总数
            if (isset($num1) && ! empty($num1)) {
                $arr = array(
                    'department_id' => $v->department_id,
                    'doctor_id' => $v->doctor_id,
                    'date' => strtotime($v->date),
                    'start' => strtotime($v->date . ' ' . $morning[0]),
                    'end' => strtotime($v->date . ' ' . $morning[1])
                );
                $appCount1 = $this->getApproximately($arr);
                $number_1 = $this->getAllVerification($arr);
            } else {
                $number_1 = 0;
                $appCount1 = 0;
            }
            if (isset($num2) && ! empty($num2)) {
                $arr = array(
                    'department_id' => $v->department_id,
                    'doctor_id' => $v->doctor_id,
                    'date' => strtotime($v->date),
                    'start' => strtotime($v->date . ' ' . $afternoo[0]),
                    'end' => strtotime($v->date . ' ' . $afternoo[1])
                );
                $appCount2 = $this->getApproximately($arr);
                $number_2 = $this->getAllVerification($arr);
            } else {
                $number_2 = 0;
                $appCount2 = 0;
            }
            if (isset($num3) && ! empty($num3)) {
                $arr = array(
                    'department_id' => $v->department_id,
                    'doctor_id' => $v->doctor_id,
                    'date' => strtotime($v->date),
                    'start' => strtotime($v->date . ' ' . $night[0]),
                    'end' => strtotime($v->date . ' ' . $night[1])
                );
                $appCount3 = $this->getApproximately($arr);
                $number_3 = $this->getAllVerification($arr);
            } else {
                $number_3 = 0;
                $appCount3 = 0;
            }
            $v->count = $number_1 +  $number_2+ $number_3;
            $v->approximately = $appCount1 + $appCount2 + $appCount3;
        }
        return $this->success($reservations);
    }
      
    
    
    
    
    
    
    /**
     * 根据id获取一条数据 .
     * ..
     */
    public function get($reservation) {
        $this->dao->get($reservation->id, $reservation);
        $time = $reservation->date;
        $day = date('Y-m-d', $time);
        unset($reservation->date);
        $num = date('w', $time);
        $reservation->week = $num;
        if ($reservation->morning) {
            $timeM = explode('-', $reservation->morning);
        }
        if ($reservation->afternoon) {
            $timeA = explode('-', $reservation->afternoon);
        }
        if ($reservation->night) {
            $timeN = explode('-', $reservation->night);
        }
        switch ($num) {
            case 0:
                $reservation->date['sunday'] = $day;
                $reservation->sundayMorning['start'] = $timeM[0];
                $reservation->sundayMorning['end'] = $timeM[1];
                $reservation->sundayAfternoon['start'] = $timeA[0];
                $reservation->sundayAfternoon['end'] = $timeA[1];
                $reservation->sundayNight['start'] = $timeN[0];
                $reservation->sundayNight['end'] = $timeN[1];
                break;
            case 1:
                $reservation->date['monday'] = $day;
                $reservation->mondayMorning['start'] = $timeM[0];
                $reservation->mondayMorning['end'] = $timeM[1];
                $reservation->mondayAfternoon['start'] = $timeA[0];
                $reservation->mondayAfternoon['end'] = $timeA[1];
                $reservation->mondayNight['start'] = $timeN[0];
                $reservation->mondayNight['end'] = $timeN[1];
                break;
            case 2:
                $reservation->date['tuesday'] = $day;
                $reservation->tuesdayMorning['start'] = $timeM[0];
                $reservation->tuesdayMorning['end'] = $timeM[1];
                $reservation->tuesdayAfternoon['start'] = $timeA[0];
                $reservation->tuesdayAfternoon['end'] = $timeA[1];
                $reservation->tuesdayNight['start'] = $timeN[0];
                $reservation->tuesdayNight['end'] = $timeN[1];
                break;
            case 3:
                $reservation->date['wednesday'] = $day;
                $reservation->wednesdayMorning['start'] = $timeM[0];
                $reservation->wednesdayMorning['end'] = $timeM[1];
                $reservation->wednesdayAfternoon['start'] = $timeA[0];
                $reservation->wednesdayAfternoon['end'] = $timeA[1];
                $reservation->wednesdayNight['start'] = $timeN[0];
                $reservation->wednesdayNight['end'] = $timeN[1];
                break;
            case 4:
                $reservation->date['thursday'] = $day;
                $reservation->thursdayMorning['start'] = $timeM[0];
                $reservation->thursdayMorning['end'] = $timeM[1];
                $reservation->thursdayAfternoon['start'] = $timeA[0];
                $reservation->thursdayAfternoon['end'] = $timeA[1];
                $reservation->thursdayNight['start'] = $timeN[0];
                $reservation->thursdayNight['end'] = $timeN[1];
                break;
            case 5:
                $reservation->date['friday'] = $day;
                $reservation->fridayMorning['start'] = $timeM[0];
                $reservation->fridayMorning['end'] = $timeM[1];
                $reservation->fridayAfternoon['start'] = $timeA[0];
                $reservation->fridayAfternoon['end'] = $timeA[1];
                $reservation->fridayNight['start'] = $timeN[0];
                $reservation->fridayNight['end'] = $timeN[1];
                break;
            case 6:
                $reservation->date['saturday'] = $day;
                $reservation->saturdayMorning['start'] = $timeM[0];
                $reservation->saturdayMorning['end'] = $timeM[1];
                $reservation->saturdayAfternoon['start'] = $timeA[0];
                $reservation->saturdayAfternoon['end'] = $timeA[1];
                $reservation->saturdayNight['start'] = $timeN[0];
                $reservation->saturdayNight['end'] = $timeN[1];
                break;
        }
        return $this->success($reservation);
    }

    /**
     * 修改数据 .
     * ..
     *
     * @param object $reservation
     */
    public function update($reservation) {
        $reservation->validate();
        return $this->dao->update($reservation);
    }

    /**
     * 删除记录 .
     * ..
     *
     * @param array $ids
     */
    public function deleteBatch($ids) {
        Entity::isIds($ids);
        $beans = $this->dao->getBatch($ids);
//         print_r($beans);
//         exit();
//         foreach ($beans as $v) {
//             $arr = $v->export();
//             $array = array(
//                 'department_id' => $arr['department_id'],
//                 //'doctor_id' => $arr['doctor_id'],
//                 'date' => $arr['date']
//             );
//             $this->deleteAll($array);
//         }
        return $this->dao->deleteBeans($beans);
    }

    /**
     * 添加到详细表 .
     * ..
     *
     * @param object $detail
     */
    public function addToDetail($detail) {
        $this->dao->addToDetail($detail);
    }

    /**
     * 获取详细列表 .
     * ..
     *
     * @param array $where
     * @return Result
     */
    public function getDetail($where) {
        $departmentS = new DepartmentService();
        $department = new Department();
        $doctorS = new DoctorService();
        $doctor = new Doctor();
        $department->id = $where['department_id'];
        $departmentContent = $departmentS->get($department);
        $doctor->id = $where['doctor_id'];
        $doctorContent = $doctorS->get($doctor);
        $detai = $this->dao->getDetail($where);
        foreach ($detai as $v) {
            $v->department = $departmentContent->data->name;
            $v->doctor = $doctorContent->data->name;
            $v->times = date('G:i', $v->times);
            $v->date = date('Y-m-d', $v->date);
        }
        return $this->success($detai);
    }

    /**
     * 获取详细页的总数 .
     * ..
     *
     * @param array $where
     * @return Result
     */
    public function getCount($where) {
        $count = $this->dao->getCount($where);
        return new Result(true, 0, '', $count);
    }

    /**
     * 删除详细列表...
     *
     * @param array $ids
     */
    public function deleteDetail($ids) {
        Entity::isIds($ids);

        $beans = $this->dao->detailBatch($ids);
        return $this->dao->deleteDetail($beans);
    }

    /**
     * 根据科室，医生，日期删除详细表中的记录...
     */
    public function deleteAll($arr) {
        $this->dao->deleteAll($arr);
    }

    /**
     * 获取已约总数
     */
    public function getApproximately($array) {
        return $this->dao->getApproximately($array);
    }
    
    /**
     * 根据条件获取总号数...
     */
    public function getAllVerification($array){
    	return $this->dao->getAllVerification($array);
    }

    /**
     * 获取详细页所有的数据
     *
     * @return Result
     */
    public function getDetailAll() {
        $detailAll = $this->dao->getDetailAll();
        $departmentS = new DepartmentService();
        $department = new Department();
        $doctorS = new DoctorService();
        $doctor = new Doctor();
        $contact = new Contact();
        $contact->id = 1;
        $contactS = new ContactService();
        $res = $contactS->get($contact);
        $department_id = 0;
        $doctor_id = 0;
        foreach ($detailAll as $detail) {
            if ($department_id != $detail->department_id) {
                $department_id = $detail->department_id;
                $department->id = $department_id;
                $departmentC = $departmentS->get($department);
            }
            if ($doctor_id != $detail->doctor_id) {
                $doctor_id = $detail->doctor_id;
                $doctor->id = $detail->doctor_id;
                $doctorC = $doctorS->get($doctor);
            }
            unset($detail->department_id, $detail->doctor_id);
            $detail->department = $departmentC->data->name;
            $detail->doctor = $doctorC->data->name;
            $detail->times = date('G:i', $detail->times);
            $detail->hospital = $res->data->val;
        }
        return $this->success($detailAll);
    }

    /**
     * 将预约者添加到预约表中去
     *
     * @param unknown_type $entity
     * @return Result
     */
    public function reserUser($entity) {
        $entity->validate();
        $this->dao->reserUser($entity);
        return $this->success();
    }
	
	public function reservationDetail($entity){
	    $this->dao->reservationDetail($entity);
	    return $this->success();
	}
	
	public function queryDetail(){
	    $res=$this->dao->queryDetail();
	    return $res;
	}
	/**
	 * 获取排班信息总数
	 */
	public function getPaibanCount($where){
		$count = $this->dao->getPaibanCount($where);
		return $this->success($count);
	}
	/**
	 * 获取排班信息
	 */
	public function getPaiban($where){
		$reservations = $this->dao->getPaiban($where);
		foreach ($reservations as $v){
			$v->date=date('Y-m-d',$v->date);
		}
		return $this->success($reservations);
	}
	
	/*
	 * 处理时间对应关系 判断当前日期应该对应哪一天
	 * */
	
	public function settimedate($date,$type,$dateorder,$typenum){
		//1496246400 14 1
		$week=date('w', $date);
		if($week==0){
			$week=7;
		}

		switch ($type){
			case 7:	
			
			$result=$week;
			break;	
			case 14:
				
				if($typenum<7){
					$result=$week;
				}else{
					$result=7+$week;
				}
				
		
			
// 			$num_res=floor($dateorder/14);
			

// if($num_res<=0){
// 	if($typenum<7){
// 		$result=$week;
// 	}else{
// 		$result=7+$week;
// 	}
	
// }elseif($num_res>0&&$num_res<=1){
// 	if($dateorder>=14&&$dateorder<21){
// 		$result=$week;
// 	}else{
// 		$result=7+$week;
// 	}
	
	
// }else{
// 	if($num_res%2==1){
// 		$result=$week;
// 	}else{
// 		$result=7+$week;
// 	}
// }


			

			break;
			default:
			$num_res=floor($dateorder/7);
			if($num_res<4){
				$result=$num_res*7+$week;

			}elseif($num_res==4){
				$result=7+$week;
				if($result>31){
					$result=$week;
				}


			}else{
				$result=floor($num_res%31)+$week;

			}
			
			
			
		}
// 					if($dateorder==27){
// 						print_r($result);
// 						exit();
// 					}
		
		
		return $result;
	}
	/*
	 * 
	 * 通过id获取相关信息
	 * */
	public function getdetailbyid($id){
		if(!empty($id)){
			$arr=array('id'=>$id);
			
			$result=$this->dao->getdetailbyid($arr);
			if($result!=null){
// 				if($result->moning_time){
// 					$marr = explode('-',$result->moning_time);
// 					print_r($arr);
// 					exit();
// 				}
// 				if($result->afternoon_time){
// 					$aarr = explode('-',$result->afternoon_time);
// 					$aarr[0]
// 				}
				$array=array('id'=>$result->id,
				              'title'=>$result->title,
				               'department_id'=>$result->department_id,
				                'type'=>$result->type,
				                'plushtime'=>$result->plushtime,
				                 'morning'=>$result->moning_time,
						'afternoon'=>$result->afternoon_time, 
						'night'=>$result->night_time
				      );
				
				
				return $this->success($array);
			}else{
		throw new ValidatorException(168);
			}

			
		}else{
			throw new ValidatorException(7);
		}
		
	}
}